library(maptree)
library(rpart)
library(rpart)
library(cluster)
tree_model=rpart(price~.,data=trail_data)
#要想对模型进行可视化 需要导入另外的包
library(maptree)
draw.tree(tree_model)
# 防止过度拟合   要对模型进行剪枝
rsq.rpart(tree_model)
plotcp(tree_model)
tree_model2=prune(tree_model,cp=0.1)
tree_model2=prune(tree_model,cp=0.1)
tree_model2=prune(tree_model,cp=0.1)
tree_model2=prune(tree_model,cp=0.1)
tree_model2=prune(tree_model,cp=0.1)
tree_model2=prune(tree_model,cp=0.1)
tree_model2=prune(tree_model,cp=0.1)
plotcp(tree_model)
#通过prune 函数对初始模型进行剪枝
tree_model2=prune(tree_model,cp=0.1)
draw.tree(tree_model2)
m=ncol(trail_data)
for(i in 1:(m-1)){
test_model=randomForest(price~.,data=trail_data,mtry=i,importance=TRUE,proximity=TRUE)
mse=mean(test_model$mse)
print(mse)
}
install.packages("randomForest")
m=ncol(trail_data)
for(i in 1:(m-1)){
test_model=randomForest(price~.,data=trail_data,mtry=i,importance=TRUE,proximity=TRUE)
mse=mean(test_model$mse)
print(mse)
}
library(randomForest)
#随机森林
m=ncol(trail_data)
for(i in 1:(m-1)){
test_model=randomForest(price~.,data=trail_data,mtry=i,importance=TRUE,proximity=TRUE)
mse=mean(test_model$mse)
print(mse)
}
library(randomForest)
#随机森林
m=ncol(trail_data)
for(i in 1:(m-1)){
test_model=randomForest(price~.,data=trail_data,mtry=i,importance=TRUE,proximity=TRUE)
mse=mean(test_model$mse)
print(mse)
}
m =ncol(trai_date)
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=trai_date,mtry=i,importance=TRUE,
proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
m =ncol(trai_date)
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=trai_data,mtry=i,importance=TRUE,
proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
m =ncol(trai_date)
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE,
proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
memory.size(max = TRUE)
library(randomForest)
#随机森林
m =ncol(trai_date)
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE,
proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
m =ncol(trai_date)
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE,
proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
m =ncol(trai_date)
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE,
proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
m =ncol(trai_date)
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE,
proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
m =ncol(trai_date)
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE,
proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
m =ncol(trai_date)
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE,
proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
m =ncol(trai_date)
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE,
proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
m =ncol(trai_date)
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE,
proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
m =ncol(trai_date)
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE,
proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
m =ncol(trai_date)
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE,
proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
m =ncol(trai_date)
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE,
proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
m =ncol(trai_date)
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE,
proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
m =ncol(trai_date)
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE,
proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
m =ncol(trai_date)
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE,
proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
m =ncol(trai_date)
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE,
proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
m =ncol(trai_date)
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE,
proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
m =ncol(trai_date)
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE,
proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
m =ncol(trai_date)
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE,
proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
m =ncol(trai_date)
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE,
proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
m =ncol(trai_date)
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE,
proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
m =ncol(trai_date)
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE,
proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
View(nearRcolor)
qqPlot( test_data$depth)
qqPlot( test_data$depth)
qqPlot( test_data$depth)
f
?
df
head(diamonds)
head(diamonds)
head(diamonds)
vb
head(diamonds)
head(diamonds)
library(ggplot2)
head(diamonds)
library(randomForest)
#随机森林
m =ncol(trai_date)
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE,
proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
library(randomForest)
#随机森林
m =ncol(trai_date)
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE,
proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
m =ncol(trai_date)
for (i in 1:(10)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE,
proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
m =ncol(trai_date)
for (i in 1:(10)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE,
proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
m =ncol(trai_date)
for (i in 1: 5){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE,
proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
for (i in 1: 5){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE,
proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
m =ncol(trail_data)
for (i in 1: 5){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE,
proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
View(m)
m =ncol(trail_data)
sink("a.txt")
m =ncol(trail_data)
sink("a.txt")
for (i in 1: 5){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE,
proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
sink()
getwd()
for (i in 1: 5){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE,
proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
write.table(d, file = "/foo.txt", row.names = F, quote = F)
for (i in 1: 5){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE,
proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
write.table(d, file = "a.txt", row.names = F, quote = F)
m =ncol(trail_data)
print(m)
library(randomForest)
#随机森林
m =ncol(trail_data)
print(m)
for (i in 1:(m)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE,
proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
wr
m =ncol(trail_data)
print(m)
m =ncol(trail_data)
print(m)
m =ncol(trail_data)
library(ggplot2)
#dataset 名称由   diamond 改为 diamonds
head(diamonds)
# 构件数据  将原有的一个数据集按照比例拆分成两个
sample_data=sample(2,nrow(diamonds),replace = TRUE,prob=c(0.7,0.3))
trail_data=diamonds[sample_data==1,] #训练数据
test_data=diamonds[sample_data==2,] # 测试数据
library(randomForest)
#随机森林
m =ncol(trail_data)
print(m)
print(m)
print(m)
?col
?ncol
m
print(m)
View(m)
ncol(trail_data)
print(ncol(trail_data))
m =ncol(trail_data)
print(m-1)
m =ncol(trail_data)
print(m-1)
m =ncol(trail_data)
print(m-1)
m =ncol(trail_data)
print(m-1)
print(m-1)
print(m-1)
print(m-1)
print(m-1)
print(m-1)
print(m-1)
print(m-1)
View(m)
View(m-1)
m =ncol(trail_data)
for (i in 1:(m)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE,
proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
test=head(trail_data)
for (i in 1:(m)){
test_model <- randomForest(price~.,data=test,mtry=i,importance=TRUE,
proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
library(randomForest)
test=head(trail_data)
#随机森林
m =ncol(test)
for (i in 1:(m)){
test_model <- randomForest(price~.,data=test,mtry=i,importance=TRUE,
proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
for (i in 1:(m)){
test_model <- randomForest(price~.,data=test,mtry=i,importance=TRUE, proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
for (i in 1:(m)){
test_model <- randomForest(price~.,data=test,mtry=i,importance=TRUE, proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
wanings()
warnings()
for (i in 1:(m)){
test_model <- randomForest(price~.,data=test,mtry=i,importance=TRUE, proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
for (i in 1:(m)){
test_model <- randomForest(price~.,data=test,mtry=i,importance=TRUE, proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=test,mtry=i,importance=TRUE, proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=test,mtry=i,importance=TRUE, proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE, proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE, proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE, proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE, proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE, proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE, proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=test,mtry=i,importance=TRUE, proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
yes
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=test,mtry=i,importance=TRUE, proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=test,mtry=i,importance=TRUE, proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
test=head(trail_data,100)
#随机森林
m =ncol(trail_data)
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=test,mtry=i,importance=TRUE, proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
test=head(trail_data,1000)
#随机森林
m =ncol(trail_data)
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=test,mtry=i,importance=TRUE, proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
test=head(trail_data,1000)
#随机森林
m =ncol(trail_data)
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=test,mtry=i,importance=TRUE, proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
memory.limit()
memory.limit(102400)
library(randomForest)
test=head(trail_data,10000)
#随机森林
m =ncol(trail_data)
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE, proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
memory.limit(204800)
library(randomForest)
test=head(trail_data,10000)
#随机森林
m =ncol(trail_data)
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE, proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
memory.limit()
memory.limit(2048000)
memory.limit()
library(randomForest)
test=head(trail_data,10000)
#随机森林
m =ncol(trail_data)
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE, proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
memory
memory.size()
memory.size()
