?sort
inspect(sort(m3,by="lift")[1:5,])
install.packages("twitteR")
library(twitteR)
install.packages("RCurl")
library(Rcurl)
library(RCurl)
library(shiny)
runExample("01_hellow")
runExample("01_hello")
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jre1.8.0_60')
install.packages("Rwordseg", repos="http://R-Forge.R-project.org")
R.version()
R.Version()
install.packages("C:/Users/yzm/AppData/Local/Temp/Rtmpcr6UeS/downloaded_packages/Rwordseg_0.2-1.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/yzm/Desktop/Rwordseg_0.2-1.tar.gz", repos = NULL, type = "source")
Sys.getenv("JAVA_HOME")
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jre1.8.0_73')
Sys.getenv("JAVA_HOME")
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jdk1.8.0_60/jre')
library(rJava)
Sys.getenv("JAVA_HOME")
install.packages("C:/Users/yzm/Desktop/Rwordseg_0.2-1.tar.gz", repos = NULL, type = "source")
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jre1.8.0_60')
library(rJava)
Sys.getenv("JAVA_HOME")
install.packages("C:/Users/yzm/Desktop/Rwordseg_0.2-1.tar.gz", repos = NULL, type = "source")
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jre1.8.0_60')
library(rJava)
install.packages("Rwordseg", repos="http://R-Forge.R-project.org")
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jdk1.8.0_60/jre/server')
library(rJava)
install.packages("C:/Users/yzm/Desktop/Rwordseg_0.2-1.tar.gz", repos = NULL, type = "source")
library(Rwordseg)
uninstall(rJava)
install(rJava)
install.packages(rJava)
install.packages(rJava)
install.packages("rJava")
Sys.getenv("JAVA_HOME")
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jdk1.8.0_60/jre')
Sys.getenv("JAVA_HOME")
library(rJava)
install.packages("C:/Users/yzm/Desktop/Rwordseg_0.2-1.tar.gz", repos = NULL, type = "source")
remove.packages(rJava)
remove.packages(rJava)
remove.packages(rJava)
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jdk1.8.0_60/jre')
Sys.getenv("JAVA_HOME")
library(rJava)
install.packages("C:/Users/yzm/Desktop/Rwordseg_0.2-1.tar.gz", repos = NULL, type = "source")
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jdk1.8.0_91/jre')
library(rJava)
install.packages("C:/Users/yzm/Desktop/Rwordseg_0.2-1.tar.gz", repos = NULL, type = "source")
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jdk1.8.0_91\\jre')
library(rJava)
install.packages("Rwordseg", repos="http://R-Forge.R-project.org")
Sys.getenv("JAVA_HOME")
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre1.8.0_91')
library(rJava)
install.packages("Rwordseg", repos="http://R-Forge.R-project.org")
install.packages("spark")
install.packages("SparkR")
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre1.8.0_91') # for 64-bit version
library(rJava)
library(SnowballC)
library(RWeka)
library(tm)
library(Rwordseg)
library(XML)
library(wordcloud)
#install.packages("tm.corpus.Reuters21578", repos = "http://datacube.wu.ac.at")
library(tm.corpus.Reuters21578)
m=c(acq,crude)
data(acq)
m=c(acq,crude)
data(crude)
data(acq,crude)
dtm=DocumentTermMatrix(m)
dtm=removeSparseTerms(dtm,0.8)
m=c(acq,crude)
dtm=DocumentTermMatrix(m)
dtm=removeSparseTerms(dtm,0.8)
inspect(dtm[1:5,1:5])
hc=hclust(dist_dm,method='ave')
dist_dm=dissimilarity(dtm,method='cosine')
inspect(dtm[1:5,1:5])
dist_dm=dissimilarity(dtm,method='cosine')
inspect(dtm[1:5, 1:5])
dist_dtm <- dissimilarity(dtm, method = 'cosine')
hc <- hclust(dist_dtm, method = 'ave')
plot(hc, xlab = '')
dist_dtm <- dissimilarity(dtm, method = 'cosine')
hc <- hclust(dist_dtm, method = 'ave')
plot(hc, xlab = '')
dist_dtm <- dissimilarity(dtm, method = 'cosine')
?dissimilarity
dist_dtm <- dissimilarity(dtm, method = 'cosine')
dist_dtm <- dissimilarity(dtm, method = 'affinity')
dist_dtm <- dissimilarity(dtm, method = null)
class(dtm)
dtm=removeSparseTerms(dtm,0.8)
inspect(dtm[1:5, 1:5])
dist_dtm <- dissimilarity(dtm, method = null)
dist_dtm <- dissimilarity(dtm, method ='cosine')
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre1.8.0_91') # for 64-bit version
library(rJava)
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre1.8.0_91') # for 64-bit version
library(rJava)
library(Rwordseg)
library(XML)
library(wordcloud)
library(RColorBrewer)
honglou=file.choose()
lecture=read.csv(honglou,stringsAsFactors = FALSE)
lecture
summary(lecture)
installDict(file.choose(),"honglou1")
installDict(file.choose(),"honglou2")
installDict(file.choose(),"honglou3")
installDict(file.choose(),"honglou4")
segmentCN("朝辞白帝彩云间千里江陵一日还 两岸猿声啼不住 轻舟已过万重山")
words=unlist(lapply(X=res,FUN=segmentCN))
res=lecture[]
words=unlist(lapply(X=res,FUN=segmentCN))
words
summary(words)
head(words,20)
res=lecture[]
res
?lapply
View(x)
View(x$a)
lapply(x,mean)
?list
class(x)
x <- list(a = 1:10, beta = exp(-3:3))
x
lapply(x,mean)
x$a
x <- list(a = 1:10, beta = exp(-3:3),logic=c(TRUE,TRUE,FALSE,FALSE))
x$logic
class(x)
lapply(x,mean)
x <- list(a = 1:10, beta = exp(-3:3),logic=c(TRUE,FALSE,FALSE,FALSE))
lapply(x,mean)
head(res,2)
head(res,5)
head(res,6)
head(res)
honglou=file.choose()
lecture=read.csv(honglou,stringsAsFactors = FALSE)
words=unlist(lapply(X=res,FUN=segmentCN))
res=lecture[]
words=unlist(lapply(X=res,FUN=segmentCN))
head(res)
y=unlist(lapply(x,mean))
y
class(y)
y$a
x <- list(a = 1:10, beta = exp(-3:3),logic=c(TRUE,FALSE,FALSE,FALSE))
x$logic
class(x)
y=unlist(sapply(x,mean))
class(y)
y
y[1]
z="朝辞白帝彩云间千里江陵一日还 两岸猿声啼不住 轻舟已过万重山"
segmentCN(z)
z=c("朝辞白帝彩云间千里江陵一日还 两岸猿声啼不住 轻舟已过万重山",
"白发三千丈 缘愁似个长 不知明镜里何处得秋霜")
z
class(z)
z=list("朝辞白帝彩云间千里江陵一日还 两岸猿声啼不住 轻舟已过万重山",
"白发三千丈 缘愁似个长 不知明镜里何处得秋霜")
class(z)
test=unlist(sapply(z,segmentCN))
test
z=list("朝辞白帝彩云间千里江陵一日还 两岸猿声啼不住 轻舟已过万重山",
"白发三千丈 缘愁似个长 不知明镜里何处得秋霜",
"白日依山尽,黄河入海流欲穷千里目 更上一层楼")
class(z)
segmentCN(z)
test=unlist(sapply(z,segmentCN))
test
z=list("朝辞白帝彩云间千里江陵一日还 两岸猿声啼不住 轻舟已过万重山",
"白发三千丈 缘愁似个长 不知明镜里何处得秋霜",
"白日依山尽,黄河入海流欲穷千里目 更上一层楼",
"君不见黄河之水天上来 奔流到海不复回 君不见高堂明镜悲白发 朝如青丝暮成雪",
"天门中断楚江开 碧水东流至此回
两岸青山相对出 孤帆一片日边来")
class(z)
test=unlist(sapply(z,segmentCN))
test
tests=unlist(sapply(z,segmentCN))
test=lapply(X=tests,FUN=strsplit," ")
test
View(test)
testTable=table(test)
testTable=table(unlist(test))
testTable
View(testTable)
hTable=table(unlist(word))
word=lapply(X=words,FUN=strsplit, ' ')
hTable=table(unlist(word))
class(testTable)
testTable[1]
testTable[,1]
testTable[1,]
testTable[]
testTable[1]
z=list("朝辞白帝彩云间千里江陵一日还 两岸猿声啼不住 轻舟已过万重山",
"白发三千丈 缘愁似个长 不知明镜里何处得秋霜",
"白日依山尽,黄河入海流欲穷千里目 更上一层楼",
"君不见黄河之水天上来 奔流到海不复回 君不见高堂明镜悲白发 朝如青丝暮成雪",
"天门中断楚江开 碧水东流至此回
两岸青山相对出 孤帆一片日边来","北国风光 千里冰封 万里雪飘")
z=list("朝辞白帝彩云间千里江陵一日还 两岸猿声啼不住 轻舟已过万重山",
"白发三千丈 缘愁似个长 不知明镜里何处得秋霜",
"白日依山尽,黄河入海流欲穷千里目 更上一层楼",
"君不见黄河之水天上来 奔流到海不复回 君不见高堂明镜悲白发 朝如青丝暮成雪",
"天门中断楚江开 碧水东流至此回
两岸青山相对出 孤帆一片日边来","北国风光 千里冰封 万里雪飘")
tests=unlist(sapply(z,segmentCN))
test=lapply(X=tests,FUN=strsplit," ")
testTable=table(unlist(test))
testTable[1]
testTable[[1]]
testTable[2]
testTable=rev(sort(testTable))
names(testTable)
df=data.dframe(词汇=names(testTable),词频=testTable)
df=data.frame(词汇=names(testTable),词频=testTable)
df
df=data.frame(testTable)
df
wordcloud(df,random.color = TRUE,random.order = TRUE)
wordcloud(df$Var1,df$freq,random.color = TRUE,random.order = TRUE)
wordcloud(df$Var1,df$Freq,random.color = TRUE,random.order = TRUE)
wordcloud(df$Var1,df$Freq)
df
wordcloud(df$Var1,df$Freq)
wordcloud2(df$Var1,df$Freq)
library(wordcloud2)
wordcloud2(df$Var1,df$Freq)
wordcloud2(df)
hTable=data.frame(hTable)
head(hTable)
head(hTable,10)
head(hTable,100)
hTable=subset(hTablem,nchar(as.character(hTable$Var1))>1& hTable$Freq>100)
hTable=subset(hTable,nchar(as.character(hTable$Var1))>1& hTable$Freq>100)
wordcloud2(hTable)
wordcloud2(hTable)
hTable
hTable=subset(hTable,nchar(as.character(hTable$Var1))>1& hTable$Freq>50)
hTable
wordcloud2(hTable)
hTable=subset(hTable,nchar(as.character(hTable$Var1))>1& hTable$Freq>20)
hTable
wordcloud2(hTable)
hTable
hTable=table(unlist(word))
hTable=data.frame(hTable)
hTable
wordcloud2(hTable)
hTable=subset(hTable,nchar(as.character(hTable$Var1))>1)
hTable
wordcloud2(hTable)
wordcloud2(df)
honglou=file.choose()
lecture=read.csv(honglou,stringsAsFactors = FALSE)
lecture=read.csv(honglou,stringsAsFactors = FALSE)
res=lecture[]
honglou1=file.choose()
lecture1=read.csv(honglou1,stringsAsFactors = FALSE)
lecture1=read.csv(honglou1,stringsAsFactors = FALSE,header=FALSE)
?read.csv
lecture1=read.csv(honglou1, fileEncoding="UTF-8",stringsAsFactors = FALSE,header=FALSE)
lecture1=read.csv(honglou1, fileEncoding="UTF-8",stringsAsFactors = FALSE,header=FALSE)
res1=lecture1[]
words=unlist(lapply(X=res1,FUN=segmentCN)
word=lapply(X=words,FUN=strsplit,' ')
word=lapply(X=words,FUN=strsplit,' ')
word=lapply(X=words,FUN=strsplit,' ')
word
head(word)
hTable=table(unlist(word))
hTable=rev(sort(hTable))
hTable=rev(sort(hTable))
hdf=data.frame(hTable)
hdf
wordcloud2(hdf)
lecture1=read.csv(honglou1, stringsAsFactors = FALSE,header=FALSE)
res1=lecture1[]
words=unlist(lapply(X=res1,FUN=segmentCN))
word=lapply(X=words,FUN=strsplit,' ')
head(word)
hTable=table(unlist(word))
hTable=rev(sort(hTable))
hdf=data.frame(hTable)
wordcloud2(hdf)
hdf=subset(hdf,nchar(as.character(hdf$Var1)>1)
wordcloud2(hdf)
hdf=subset(hdf,nchar(as.character(hdf$Var1)>1))
hdf=subset(hdf,nchar(as.character(hdf$Var1))>1)
wordcloud2(hdf)
hdf
hdf=data.frame(hTable)
head(hdf)
wordcloud2(head(hdf))
lecture1=read.csv(honglou1,Encoding="UTF-8" stringsAsFactors = FALSE,header=FALSE)
lecture1=read.csv(honglou1,fileEncoding="UTF-8",stringsAsFactors = FALSE,header=FALSE)
res1=lecture1[]
words=unlist(lapply(X=res1,FUN=segmentCN))
word=lapply(X=words,FUN=strsplit,' ')
head(word)
hTable=table(unlist(word))
hTable=rev(sort(hTable))
hdf=data.frame(hTable)
head(hdf)
hdf=subset(hdf,nchar(as.character(hdf$Var1))>1)
head(hdf)
hdf=subset(hdf,nchar(as.character(hdf$Var1))>1& hdf$Freq>100)
head(hdf)
wordcloud2(head(hdf))
hdf
wordcloud2(hdf)
class(words)
words
View(words)
wordcloud2(hdf,shape = squre)
wordcloud2(hdf,shape = tringle)
wordcloud2(hdf,shape = "tringle")
?wordcloud2
wordcloud2(hdf,shape = "cloud")
wordcloud2(hdf,shape = "diamond")
class(word)
hTable=table(unlist(word))
#hTable=rev(sort(hTable))
hdf=data.frame(hTable)
hdf=subset(hdf,nchar(as.character(hdf$Var1))>1& hdf$Freq>100)
hdf
wordcloud2(hdf,shape = "diamond")
words=lapply(X=res1,FUN=segmentCN)
class(words)
word=lapply(X=words,FUN=strsplit,' ')
words=unlist(lapply(X=res1,FUN=segmentCN))
hTable=table(words)
hdf=data.frame(hTable)
hdf=subset(hdf,nchar(as.character(hdf$Var1))>1& hdf$Freq>100)
hdf
wordcloud2(hdf,shape = "diamond")
View(words)
words=unlist(lapply(X=res1,FUN=segmentCN))
View(words)
class(words)
class(word)
hTable=table(words)
hdf=data.frame(hTable)
wordcloud2(hdf,shape = "diamond")
hdf=subset(hdf,nchar(as.character(hdf$Var1))>1& hdf$Freq>100)
hdf
wordcloud2(hdf,shape = "diamond")
hdf
hdf=data.frame(hTable)
hdf
hdf=subset(hdf,nchar(as.character(hdf$Var1))>1& hdf$Freq>100)
hdf
hdf=subset(hdf,nchar(as.character(hdf$words))>1& hdf$Freq>100)
hdf
hdf=data.frame(hTable)
hdf=subset(hdf,nchar(as.character(hdf$words))>1& hdf$Freq>100)
hdf
wordcloud2(hdf,shape = "diamond")
htest=segmentCN(file.choose(),returnType = tm)
class=htest
class(htest)
head(htest)
?segmentCN
??segmentCN
htest=segmentCN(file.choose(),returnType = tm)
class(htest)
head(htest)
class(words)
word=unlist(lapply(X=words,FUN=strsplit,' '))
hTable=table(words)
hdf=data.frame(hTable)
hdf=subset(hdf,nchar(as.character(hdf$words))>1& hdf$Freq>100)
hdf
res2=read.csv(file.choose(),fileEncoding ="UTF-8", stringsAsFactors = FALSE,header = FALSE)[]
hTable2=table(unlist(lapply(X=res2,FUN=segmentCN())))
words2=unlist(lapply(X=res2,FUN=segmentCN))
htable2=htable(words2)
htable2=table(words2)
htable2
hdf=data.frame(table(words2))
hdf
hdf=subset(hdf,nchar(as.character(hdf$words2))>1&hdf$Freq>100)
wordcloud2(hdf)
hdf2=data.frame(words2)
hdf2$words2
hdf2
?table
install.packages("devtools")
install_github("amplab-extras/SparkR-pkg", subdir="pkg")
install.packages("spark")
?spark
??spark
install.packages(c("git2r", "xml2", "rversions"))
librar(devtools)
library(devtools)
install_github("amplab-extras/SparkR-pkg", subdir="pkg")
install.packages("sparklyr")
library(sparklyr)
library(sparklyr)
spark_install(version = "1.6.1")
spark_install(version = "2.1.1")
spark_available_versions()
spark_install(version = "2.0.2")
install_github("amplab-extras/SparkR-pkg", subdir="pkg")
library(devtools)
install_github("amplab-extras/SparkR-pkg", subdir="pkg")
library(sparklyr)
library(dplyr)
sc=spark_connect(master="local")
sc= spark_connect(master = "spark://local:7077")
library(rJava)
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre1.8.0_91')
library(rJava)
sc= spark_connect(master = "spark://local:7077")
Sys.setenv(SPARK_HOME='\\opt\\spark\\spark-2.0.2-bin-hadoop2.7')
sc= spark_connect(master = "spark://local:7077")
install.packages("C:/Users/yzm/Desktop/spark-2.1.1-bin-hadoop2.7/spark-2.1.1-bin-hadoop2.7/R/lib/sparkr.zip", repos = NULL, type = "win.binary")
library(sparkr)
library(SparkR)
?SparkR
??SparkR
library(SparkR)
sparkR.session(appName = "SparkR-DataFrame-example")
localDF <- data.frame(name=c("John", "Smith", "Sarah"), age=c(19, 23, 18))
df <- createDataFrame(localDF)
printSchema(df)
sparkR.session(appName = "SparkR-DataFrame-example")
localDF <- data.frame(name=c("John", "Smith", "Sarah"), age=c(19, 23, 18))
localDF
df <- createDataFrame(localDF)
sparkR.session(appName = "SparkR-DataFrame-example")
sc <- sparkR.init(master="local")
library(SparkR)
sc <- sparkR.init(master=" spark://localhost:7077",sparkEnvir=list(spark.executor.memory="1g",spark.cores.max="10"))
Sys.setenv(SPARK_HOME='C:\\Users\\yzm\\AppData\\Local\\rstudio\\spark\\Cache\\spark-2.0.2-bin-hadoop2.7')
sc <- sparkR.session(master=" spark://localhost:7077",sparkEnvir=list(spark.executor.memory="1g",spark.cores.max="10"))
sc <- sparkR.init(master="local")
sc <- sparkR.init(master="local")
sparkR.session(appName = "SparkR-DataFrame-example")
localDF <- data.frame(name=c("John", "Smith", "Sarah"), age=c(19, 23, 18))
localDF
df <- createDataFrame(localDF)
path <- file.path(Sys.getenv("SPARK_HOME"), "examples/src/main/resources/people.json")
peopleDF <- read.json(path)
sparkR.session(appName = "SparkR-DataFrame-example")
sc <- sparkR.session(master=" spark://localhost:7077")
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre1.8.0_91')
Sys.setenv(SPARK_HOME='C:\\Users\\yzm\\AppData\\Local\\rstudio\\spark\\Cache\\spark-2.0.2-bin-hadoop2.7')
library(sparklyr)
library(rJava)
library(dplyr)
library(SparkR)
sc <- sparkR.session(master=" spark://localhost:7077")
library(SparkR)
# Initialize SparkSession
sparkR.session(appName = "SparkR-DataFrame-example")
sc <- sparkR.session(master=" spark://localhost:4040")
spark_disconnect(sc)
hdf=data.frame(hTable)
wordcloud2(hdf,shape = "diamond")
library(wordcloud2)
wordcloud2(hdf)
hdf=subset(hdf,nchar(as.character(hdf$words2))>1&hdf$Freq>100)
wordcloud2(hdf)
hdf=subset(hdf,nchar(as.character(hdf$words2))>1&hdf$Freq>100)
wordcloud2(hdf)
hdf
hdf=data.frame(table(words2))
hdf
hdf=subset(hdf,nchar(as.character(hdf$words2))>1& hdf$Freq>100)
hdf
wordcloud2(hdf)
wordcloud2(hdf)
rPlot(mpg ~ wt , data = mtcars, color = 'wt', type = 'point')
install.packages("rvest")
library(rvest)
webpage=read_html(url)
url='http://www.diamondse.info/webService.php?shape=none&minCarat=0.2&maxCarat=30&minColor=1&maxColor=9&minPrice=100&maxPrice=1000000&minCut=5&maxCut=1&minClarity=1&maxClarity=10&minDepth=0&maxDepth=90&minWidth=0&maxWidth=90&gia=1&ags=1&egl=0&oth=0&currency=USD&rowStart=40&sortCol=price&sortDir=ASC'
webpage=read_html(url)
webpage
rank_data_html <- html_nodes(webpage,'td')
rank_data_html
head(rank_data_html,50)
head(rank_data_html,30)
rank_data_html
for(i in rank_data_html){
print(paste(" nbode",rank_data_html[i]))
}
rank_data_html[40]
rank_data_html[2]
rank_data_html[2]
rank_data_html[15]
rank_data_html[28]
rank_data_html[31]
rank_data_html[41]
