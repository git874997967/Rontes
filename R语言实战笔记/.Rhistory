for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE,
proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
m =ncol(trai_date)
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE,
proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
m =ncol(trai_date)
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE,
proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
m =ncol(trai_date)
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE,
proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
m =ncol(trai_date)
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE,
proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
m =ncol(trai_date)
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE,
proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
m =ncol(trai_date)
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE,
proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
View(nearRcolor)
qqPlot( test_data$depth)
qqPlot( test_data$depth)
qqPlot( test_data$depth)
f
?
df
head(diamonds)
head(diamonds)
head(diamonds)
vb
head(diamonds)
head(diamonds)
library(ggplot2)
head(diamonds)
library(randomForest)
#随机森林
m =ncol(trai_date)
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE,
proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
library(randomForest)
#随机森林
m =ncol(trai_date)
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE,
proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
m =ncol(trai_date)
for (i in 1:(10)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE,
proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
m =ncol(trai_date)
for (i in 1:(10)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE,
proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
m =ncol(trai_date)
for (i in 1: 5){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE,
proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
for (i in 1: 5){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE,
proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
m =ncol(trail_data)
for (i in 1: 5){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE,
proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
View(m)
m =ncol(trail_data)
sink("a.txt")
m =ncol(trail_data)
sink("a.txt")
for (i in 1: 5){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE,
proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
sink()
getwd()
for (i in 1: 5){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE,
proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
write.table(d, file = "/foo.txt", row.names = F, quote = F)
for (i in 1: 5){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE,
proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
write.table(d, file = "a.txt", row.names = F, quote = F)
m =ncol(trail_data)
print(m)
library(randomForest)
#随机森林
m =ncol(trail_data)
print(m)
for (i in 1:(m)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE,
proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
wr
m =ncol(trail_data)
print(m)
m =ncol(trail_data)
print(m)
m =ncol(trail_data)
library(ggplot2)
#dataset 名称由   diamond 改为 diamonds
head(diamonds)
# 构件数据  将原有的一个数据集按照比例拆分成两个
sample_data=sample(2,nrow(diamonds),replace = TRUE,prob=c(0.7,0.3))
trail_data=diamonds[sample_data==1,] #训练数据
test_data=diamonds[sample_data==2,] # 测试数据
library(randomForest)
#随机森林
m =ncol(trail_data)
print(m)
print(m)
print(m)
?col
?ncol
m
print(m)
View(m)
ncol(trail_data)
print(ncol(trail_data))
m =ncol(trail_data)
print(m-1)
m =ncol(trail_data)
print(m-1)
m =ncol(trail_data)
print(m-1)
m =ncol(trail_data)
print(m-1)
print(m-1)
print(m-1)
print(m-1)
print(m-1)
print(m-1)
print(m-1)
print(m-1)
View(m)
View(m-1)
m =ncol(trail_data)
for (i in 1:(m)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE,
proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
test=head(trail_data)
for (i in 1:(m)){
test_model <- randomForest(price~.,data=test,mtry=i,importance=TRUE,
proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
library(randomForest)
test=head(trail_data)
#随机森林
m =ncol(test)
for (i in 1:(m)){
test_model <- randomForest(price~.,data=test,mtry=i,importance=TRUE,
proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
for (i in 1:(m)){
test_model <- randomForest(price~.,data=test,mtry=i,importance=TRUE, proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
for (i in 1:(m)){
test_model <- randomForest(price~.,data=test,mtry=i,importance=TRUE, proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
wanings()
warnings()
for (i in 1:(m)){
test_model <- randomForest(price~.,data=test,mtry=i,importance=TRUE, proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
for (i in 1:(m)){
test_model <- randomForest(price~.,data=test,mtry=i,importance=TRUE, proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=test,mtry=i,importance=TRUE, proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=test,mtry=i,importance=TRUE, proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE, proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE, proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE, proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE, proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE, proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE, proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=test,mtry=i,importance=TRUE, proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
yes
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=test,mtry=i,importance=TRUE, proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=test,mtry=i,importance=TRUE, proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
test=head(trail_data,100)
#随机森林
m =ncol(trail_data)
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=test,mtry=i,importance=TRUE, proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
test=head(trail_data,1000)
#随机森林
m =ncol(trail_data)
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=test,mtry=i,importance=TRUE, proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
test=head(trail_data,1000)
#随机森林
m =ncol(trail_data)
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=test,mtry=i,importance=TRUE, proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
memory.limit()
memory.limit(102400)
library(randomForest)
test=head(trail_data,10000)
#随机森林
m =ncol(trail_data)
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE, proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
memory.limit(204800)
library(randomForest)
test=head(trail_data,10000)
#随机森林
m =ncol(trail_data)
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE, proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
memory.limit()
memory.limit(2048000)
memory.limit()
library(randomForest)
test=head(trail_data,10000)
#随机森林
m =ncol(trail_data)
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE, proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
memory
memory.size()
memory.size()
memory.size()
memory.limit()
memory.limit(204800)
library(randomForest)
test=head(trail_data,10000)
#随机森林
m =ncol(trail_data)
for (i in 1:(m-1)){
test_model <- randomForest(price~.,data=trail_data,mtry=i,importance=TRUE, proximity=TRUE)
mse <- mean(test_model$mse)
print(mse)
}
head(stagec)
library(rpart)
head(stagec)
progstat= factor(stagec$pgstat,levels=0:1,lables=c("No","Prog"))
progstat= factor(stagec$pgstat,levels=0:1,labels=c("No","Prog"))
print(cfit)
#作图
par(mar=rep(0.1,4))
plot(cfit)
cfit=rpart(progstat~age +eet+g2 +grade +gleason+ploidy,data=stagec,method='class')
par(mar=rep(0.1,4))
plot(cfit)
library(rpart)
head(stagec)
progstat= factor(stagec$pgstat,levels=0:1,labels=c("No","Prog"))
#建树 做生存分析通常选择  exp  因变量是因子变量 选择class   做poission 选择 poisson   其他情况选择  anova
cfit=rpart(progstat~age +eet+g2 +grade +gleason+ploidy,data=stagec,method='class')
#输出结果
print(cfit)
#作图
par(mar=rep(0.1,4))
plot(cfit)
library(rpart)
head(stagec)
progstat= factor(stagec$pgstat,levels=0:1,labels=c("No","Prog"))
#建树 做生存分析通常选择  exp  因变量是因子变量 选择class   做poission 选择 poisson   其他情况选择  anova
cfit=rpart(progstat~age +eet+g2 +grade +gleason+ploidy,data=stagec,method='class')
#输出结果
print(cfit)
#作图
par(mar=rep(0.1,4))
plot(cfit)
text(cfit)
(temp = with(stagec, table(cut(grade, c(0, 2.5, 4)),cut(gleason,c(2,5.5,10)),exclusde=NULL)))
#3剪枝
cfit2=prune(cfit,cp=.02)
plot(cfit2)
text(cfit2)
printcp(cfit2)# 输出剪枝表格
summary(cfit2) #输出完整细节
y=matrix(1:20,nrow=4,ncol=5)
print(y)
mymatrix=matrix(c(1,26,25,66),nrow=2,ncol=2, byrow = TRUE,dimnames = list(c("R1","R2"),c("AA","BB")))
print(mymatirx)
mymatrix=matrix(c(1,26,25,66),nrow=2,ncol=2, byrow = TRUE,dimnames = list(c("R1","R2"),c("AA","BB")))
print(mymatrix)
mymatrix=matrix(c(1,26,25,66),nrow=2,ncol=2, byrow = FALSE,dimnames = list(c("R1","R2"),c("AA","BB")))
print(mymatrix)
mymatrix=matrix(c(1,26,25,66),nrow=2,ncol=2, byrow = FALSE,dimnames = list(c("R1","R2"),c("AA","BB")))
print(mymatrix)
mymatrix=matrix(c(1,26,25,66),nrow=2,ncol=2, byrow = FALSE,dimnames = list(c("R1","R2"),c("AA","BB")))
print(mymatrix)
mymatrix=matrix(c(1,26,25,66),nrow=2,ncol=2, byrow = FALSE,dimnames = list(c("R1","R2"),c("AA","BB")))
print(mymatrix)
talbe(airquality$Ozone,airquality$Solar.R)
table(airquality$Ozone,airquality$Solar.R)
head(table(airquality$Ozone,airquality$Solar.R))
head(table(airquality$Ozone,airquality$Solar.R,dimnames=list(c("aa",'BB'))))
summary(mtcars$mpg)
plot(mtcars$mpg,mtcars$disp)
attach(mtcars)
summary(mpg)
plot(mpg,disp)
attach(mtcars)
summary(mpg)
plot(mpg,disp)
with(
mtcars,{
summary(mpg,disp,wt)
plot(mpg,disp)
plot(mpg,wt)
})
with(
mtcars,{
status=summary(mpg,disp,wt)
plot(mpg,disp)
plot(mpg,wt)
})
status
with(
mtcars,{
status<<-summary(mpg,disp,wt)
plot(mpg,disp)
plot(mpg,wt)
})
status
sta=factor(c("important","poor","excellent",order=TRUE,levels=c("poor","important","excellent")))
print(sta)
str(sta)
summary(head(airquality))
summary(airquality)
t="my first list"
v=c(25,26,18,39)
m=matrix(1:10,nrow=5)
n=c("one","two","three")
mylist=list(title=t,ages=v,m,n)
summary(mylist)
mylist
mylist=edit(mylist)
fix(mylist)
head(airquality)
head(airquality,10)
head(airquality,10,na.omit=TRUE)
head(airquality,10,na.omit=TRUE)
head(airquality,10,na.remove=TRUE)
head(airquality,10,na.remove=TRUE)
head(airquality,10,na.remove=TRUE)
head(airquality,10,na.remove=TRUE)
head(airquality,10,na.remove=TRUE)
head(airquality,10,na.remove=TRUE)
head(airquality,10,na.remove=TRUE)
head(airquality,10,na.remove=TRUE)
head(airquality,10,na.remove=TRUE)
with(mtcars,{
plot(mpg,disp)
plot(wt,mpg)
})
with(mtcars,{
plot(mpg,disp)
plot(wt,mpg,xlable="AA")
})
with(mtcars,{
plot(mpg,disp)
plot(wt,mpg,xlabel="AA")
})
with(mtcars,{
plot(mpg,disp)
plot(wt,mpg,xlabel="AA")
})
with(mtcars,{
plot(mpg,disp)
plot(wt,mpg,xlabels="AA")
})
warnings()
with(mtcars,{
plot(mpg,disp)
plot(wt,mpg)
abline(lm(mpg~wt))
title("regression of mpg on weight")
})
pdf("abc.pdf")
with(mtcars,{
plot(mpg,disp)
plot(wt,mpg)
abline(lm(mpg~wt))
title("regression of mpg on weight")
})
dev.off()
