"rowgreen", arrows = c(FALSE, TRUE))
library(psych)
pc=princomp(mtcars,cor=TRUE,scores=TRUE)
pc
pc
summary(pc)
plot(pc,type="l",col=2)
pc1=princomp(iris[c(-5)],cor=TRUE,scores=TRUE)
summary(pc1)
summary(pc1)
plot(pc1)
summary(pc1)
summary(pc1)
plot(pc1)
plot(pc1,type="l")
pc1=princomp(iris,cor=TRUE,scores=TRUE)
[c(-5)
pc1=princomp(iris[c(-5)],cor=TRUE,scores=TRUE)
head(USArrests)
c=cor(USArrests)
c
e=eigen(c)
e
pc2=princomp(USArrests,cor=TRUE,scores=TRUE)
summary(pc2)
plot(pc2,type="l")
pc=princomp(mtcars,cor=TRUE,scores=TRUE,loadings=TRUE,scale=TRUE)
pc=princomp(mtcars,cor=TRUE,scores=TRUE)
pc$weights
pcc=prcomp(mtcars,cor=TRUE,scale=TRUE)
?prcomp
summary(pc)
summary(pcc)
summary(pc)
summary(pcc)
summary(pc)
summary(pc)
summary(pcc)
pcc=prcomp(mtcars,cor=TRUE,scale=FALSE)
summary(pcc)
summary(pc)
?prcomp
pc=princomp(mtcars,cor=TRUE,scores=TRUE,scale=FALSE)
principal(pc)
install.packages("RGtk2")
install.packages("rattle")
e=eigen(c)
e
library(rattle)
rattle()
data()
source('C:/Users/yzm/Desktop/MEAN&R/Rontes/R语言实战笔记/Rattle data mining in R.r')
x=rnorm(100)
x
x==rnorm(100)
y=rnorm(100)
z=rnorm(100)
df=as.data.frame(x,y,z)
df
df=data.frame(x,y,z)
df
library(e1071)
data(cats,package="MASS")
inputData=data.frame(cats[,c(2,3),response=as.factor(cats$Sex))
inputData=data.frame(cats[,c(2,3)],response=as.factor(cats$Sex))
inputData
cats
svmfit=svm(response~., data=inputData,kernel="linear",cost=10,scale=FALSE)
print(svmfit)
plot(svmfit)
plot(svmfit,data = inputData)
compareTable=table(inputData$response,predict(svmfit))
mean(inputData$response,predict(svmfit))
mean(inputData$response!=predict(svmfit))
svmfit2=svm(response~.,data=inputData,kernel="radial",cost=10,scale=FALSE)
print(svmfit2)
plot(svmfit2,data = inputData)
plot(svmfit2,data = inputData)
plot(svmfit,data = inputData)
set.seed(100) # for reproducing results
rowIndices <- 1 : nrow(inputData) # prepare row indices
sampleSize <- 0.8 * length(rowIndices) # training sample size
trainingRows <- sample (rowIndices, sampleSize) # random sampling
trainingData <- inputData[trainingRows, ] # training data
testData <- inputData[-trainingRows, ] # test data
tuned <- tune.svm(response ~., data = trainingData, gamma = 10^(-6:-1), cost = 10^(1:2)) # tune
summary (tuned) # to select best gamma and cost
sam=sample(2,nrow(inputData),replace = TRUE,prob=c(0.85,0.15))
train_data=inputData[sam==1,]
test_data=inputData[sam==2]
test_data=inputData[sam==2,]
tuned2=tune.svm(response~., data=inputData,gamma = 10^(-6:-1), cost = 10^(1:2),scale=FALSE)
summary(tuned2)
svmfit2
svmfit3=svm(response~., data = train_data,kerneal="radial",cost=100,gamma=0.01,scale = FALSE)
comparetable2=table(test_data$response,predict(svmfit3,test_data))
mean(test_data$response!=predict(svmfit3,test_data))
table(svmfit3)
table(predict(svmfit3,test_data))
table(test_data$response,predict(svmfit3,test_data))
plot(svmfit3,test_data)
plot(svmfit3,inputData)
?svm()
summary (tuned) # to select best gamma and cost
summary (order(tuned[,3]) # to select best gamma and cost
sam=sample(2,nrow(inputData),replace = TRUE,prob=c(0.85,0.15))
train_data=inputData[sam==1,]
test_data=inputData[sam==2,]
tuned2=tune.svm(response~., data=inputData,gamma = 10^(-6:-1), cost = 10^(1:2),scale=FALSE)
summary(tuned2)
svmfit3=svm(response~., data = train_data,kerneal="radial",cost=100,gamma=0.01,scale = FALSE)
comparetable2=table(test_data$response,predict(svmfit3,test_data))
mean(test_data$response!=predict(svmfit3,test_data))
plot(svmfit3,inputData)
table(test_data$response,predict(svmfit3,test_data))
summary (order(tuned[,3])) # to select best gamma and cost
summary (order(tuned$error)) # to select best gamma and cost
summary (order(tuned) # to select best gamma and cost
sam=sample(2,nrow(inputData),replace = TRUE,prob=c(0.85,0.15))
train_data=inputData[sam==1,]
test_data=inputData[sam==2,]
tuned2=tune.svm(response~., data=inputData,gamma = 10^(-6:-1), cost = 10^(1:2),scale=FALSE)
summary(tuned2)
svmfit3=svm(response~., data = train_data,kerneal="radial",cost=100,gamma=0.01,scale = FALSE)
comparetable2=table(test_data$response,predict(svmfit3,test_data))
mean(test_data$response!=predict(svmfit3,test_data))
plot(svmfit3,inputData)
table(test_data$response,predict(svmfit3,test_data))
summary (order(tuned)) # to select best gamma and cost
summary (rank(tuned)) # to select best gamma and cost
summary (rank(tuned[,3])) # to select best gamma and cost
require(devtools)
install_github('rCharts', 'ramnathv')
r1 <- rPlot(mpg ~ wt | am + vs, data = mtcars, type = "point", color = "gear")
r1$print("chart1")
install.packages("devtools")
library(devtools)
install_github('rCharts', 'ramnathv')
r1 <- rPlot(mpg ~ wt | am + vs, data = mtcars, type = "point", color = "gear")
install_github('rCharts', 'ramnathv')
r1 <- rPlot(mpg ~ wt | am + vs, data = mtcars, type = "point", color = "gear")
r1$print("chart1")
install.packages(c("rCharts", "ramnathv"))
install_github('rCharts', 'ramnathv')
install_github(rCharts/ramnathv)
install_github('rCharts'/ 'ramnathv')
install.packages("C:/Users/yzm/Desktop/ramnathv-rCharts-2c368c8.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/yzm/Desktop/ramnathv-rCharts-2c368c8.zip", repos = NULL, type = "win.binary")
require(devtools)
install_github('rCharts'/ 'ramnathv')
data(economics, package = 'ggplot2')
dat = transform(economics, date = as.character(date))
p3 <- mPlot(x = "date", y = list("psavert", "uempmed"), data = dat, type = 'Area',
labels = list('Savings Rate', 'Median Duration of Unemployment'), pointSize = 0)
p3$print('chart3')
install_github('rCharts', 'ramnathv')
install_github('ramnathv'/rcharts)
install_github('ramnathv'/"rcharts")
install_github('ramnathv/rcharts")
data(economics, package = 'ggplot2')
dat = transform(economics, date = as.character(date))
p3 <- mPlot(x = "date", y = list("psavert", "uempmed"), data = dat, type = 'Area',
labels = list('Savings Rate', 'Median Duration of Unemployment'), pointSize = 0)
p3$print('chart3')
install_github( ramnathv/rcharts)
install_github(rcharts)
install_github('rCharts')
install_github('rCharts')
install.packages("rcharts")
install_github('ramnathv/rCharts')
require(devtools)
require(devtools)
install_github('ramnathv/rCharts')
?plot()
?plot
install_github('rCharts/ramnathv')
require(devtools)
install_github('rCharts/ramnathv')
install_github("madlogos/recharts")
install.packages(c("miniUI", "shiny", "htmltools"))
devtools::install_github("rstudio/htmltools")
install_git("madlogos/recharts")
install_git("madlogos/recharts")
install_github("madlogos/recharts")
library(RCurl)
library(httr)
set_config( config( ssl_verifypeer = 0L ) )
install_github("madlogos/recharts")
install.packages("C:/Users/yzm/Desktop/ramnathv-rCharts-2c368c8.zip", repos = NULL, type = "win.binary")
library(bitops)
library(RCurl)
library(httr)
set_config( config( ssl_verifypeer = 0L ) )
library(swirl)
swirl()
quit
library(bitops)
library(RCurl)
library(httr)
set_config( config( ssl_verifypeer = 0L ) )
install_github('ramnathv/rCharts')
install.packages("devtools")
install.packages("Rcpp")
library(devtools)
library(Rcpp)
install_github('ramnathv/rCharts')
names(iris) = gsub("\\.", "", names(iris))
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
library(rCharts)
names(iris) = gsub("\\.", "", names(iris))
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
head(iris)
plot(SepalLength~SepalWidth,data=iris,col="Species)
plot(SepalLength~SepalWidth,data=iris,col="Species")
plot(SepalLength~SepalWidth,data=iris,col="Species")
plot(SepalLength~SepalWidth,data=iris,col=3)
plot(SepalLength~SepalWidth,data=iris,col="Species")
hair_eye_male <- subset(as.data.frame(HairEyeColor), Sex =="Male")
nPlot(Freq~ Hair,group = "Eye",data =hair_eye_male, type = "multiBarChart")
nPlot(Freq~ Hair,group = "Eye",data =hair_eye_male, type = "multiBarHorizontalChart")
nPlot(~SepalLength,data =iris, type = "discreteBarChart")
nPlot(SepalWidth~SepalLength,data =iris, type = "scatterChart",group='Species')
plot(SepalWidth~SepalLength,data =iris, type = "scatterChart")
plot(SepalWidth~SepalLength,data =iris, type = "l")
plot(SepalWidth~SepalLength,data =iris,  )
plot(SepalWidth~SepalLength,data =iris)
plot(SepalWidth~SepalLength,data =iris,,group='Species')
?plot
plot(SepalWidth~SepalLength,data =iris,type="p",group='Species')
plot(SepalWidth~SepalLength,data =iris,type="p",group='Species')
plot(SepalWidth~SepalLength,data =iris,type="l",group='Species')
plot(SepalWidth~SepalLength,data =iris,type="p",group='Species')
?nplot
?nPlot
??nPlot
??nPlot()
?nPlot()
nPlot(Chrome~date,data =data, type = "lineChart")
nPlot(Chrome~date,data =data, type = "lineChart")
nPlot(SepalWidth~SepalLength,data =iris, type = "lineChart")
nPlot(~Species,data =iris[1:130,], type = "pieChart")
nPlot(~Species,data =iris, type = "pieChart")
map3$setView(c(51.505, -0.09), zoom = 13)
map3$marker(c(51.5, -0.09), bindPopup = "<p> Hi. I am a popup </p>")
map3$marker(c(51.495, -0.083), bindPopup = "<p> Hi. I am another popup </p>")
map3$print("chart7")
install_github("madlogos/recharts")
install_github("madlogos/recharts")
library(recharts)
install_github("madlogos/recharts")
library(devtools)
library(Rcpp)
install_github('ramnathv/rCharts')
install_github("madlogos/recharts")
install.packages("d3r")
library(d3r)
inputData
cats
print(svmfit)
plot(svmfit,data = inputData)
svmfit=svm(response~., data=inputData,kernel="linear",cost=10,scale=FALSE)
plot(svmfit,data = inputData)
compareTable=table(inputData$response,predict(svmfit))
mean(inputData$response!=predict(svmfit))
data(cats,package="MASS")
inputData=data.frame(cats[,c(2,3)],response=as.factor(cats$Sex))
inputData
cats
#liear SVM
svmfit=svm(response~., data=inputData,kernel="linear",cost=10,scale=FALSE)
print(svmfit)
plot(svmfit,data = inputData)
compareTable=table(inputData$response,predict(svmfit))
mean(inputData$response!=predict(svmfit))
svmfit2=svm(response~.,data=inputData,kernel="radial",cost=10,scale=FALSE)
print(svmfit2)
plot(svmfit2,data = inputData)
set.seed(100) # for reproducing results
rowIndices <- 1 : nrow(inputData) # prepare row indices
sampleSize <- 0.8 * length(rowIndices) # training sample size
trainingRows <- sample (rowIndices, sampleSize) # random sampling
trainingData <- inputData[trainingRows, ] # training data
testData <- inputData[-trainingRows, ] # test data
tuned <- tune.svm(response ~., data = trainingData, gamma = 10^(-6:-1), cost = 10^(1:2)) # tune
summary (tuned) # to select best gamma and cost
sam=sample(2,nrow(inputData),replace = TRUE,prob=c(0.85,0.15))
train_data=inputData[sam==1,]
test_data=inputData[sam==2,]
tuned2=tune.svm(response~., data=inputData,gamma = 10^(-6:-1), cost = 10^(1:2),scale=FALSE)
summary(tuned2)
svmfit3=svm(response~., data = train_data,kerneal="radial",cost=100,gamma=0.01,scale = FALSE)
comparetable2=table(test_data$response,predict(svmfit3,test_data))
mean(test_data$response!=predict(svmfit3,test_data))
plot(svmfit3,input)
table(test_data$response,predict(svmfit3,test_data))
tuned2=tune.svm(response~., data=inputData,gamma = 10^(-6:-1), cost = 10^(1:2),scale=FALSE)
summary(tuned2)
library(e1071)
summary (tuned) # to select best gamma and cost
sam=sample(2,nrow(inputData),replace = TRUE,prob=c(0.85,0.15))
sam=sample(2,nrow(inputData),replace = TRUE,prob=c(0.85,0.15))
test_data=inputData[sam==2,]
summary(tuned2)
svmfit3=svm(response~., data = train_data,kerneal="radial",cost=100,gamma=0.01,scale = FALSE)
comparetable2=table(test_data$response,predict(svmfit3,test_data))
mean(test_data$response!=predict(svmfit3,test_data))
plot(svmfit3,input)
table(test_data$response,predict(svmfit3,test_data))
data(cats,package="MASS")
inputData=data.frame(cats[,c(2,3)],response=as.factor(cats$Sex))
inputData
cats
svmfit=svm(response~., data=inputData,kernel="linear",cost=10,scale=FALSE)
print(svmfit)
plot(svmfit,data = inputData)
compareTable=table(inputData$response,predict(svmfit))
plot(svmfit,data = inputData)
compareTable=table(inputData$response,predict(svmfit))
mean(inputData$response!=predict(svmfit))
svmfit2=svm(response~.,data=inputData,kernel="radial",cost=10,scale=FALSE)
print(svmfit2)
plot(svmfit2,data = inputData)
set.seed(100) # for reproducing results
rowIndices <- 1 : nrow(inputData) # prepare row indices
sampleSize <- 0.8 * length(rowIndices) # training sample size
trainingRows <- sample (rowIndices, sampleSize) # random sampling
trainingData <- inputData[trainingRows, ] # training data
testData <- inputData[-trainingRows, ] # test data
tuned <- tune.svm(response ~., data = trainingData, gamma = 10^(-6:-1), cost = 10^(1:2)) # tune
summary (tuned) # to select best gamma and cost
sam=sample(2,nrow(inputData),replace = TRUE,prob=c(0.85,0.15))
train_data=inputData[sam==1,]
test_data=inputData[sam==2,]
tuned2=tune.svm(response~., data=inputData,gamma = 10^(-6:-1), cost = 10^(1:2),scale=FALSE)
summary(tuned2)
svmfit3=svm(response~., data = train_data,kerneal="radial",cost=100,gamma=0.01,scale = FALSE)
comparetable2=table(test_data$response,predict(svmfit3,test_data))
mean(test_data$response!=predict(svmfit3,test_data))
plot(svmfit3,input)
table(test_data$response,predict(svmfit3,test_data))
plot(svmfit3,input)
plot(svmfit3,inputData)
plot(svmfit3,inputData)
sam_iris=sample(2, nrow(iris),replace = TRUE, prob=c(0.85,0.15))
train_iris=iris[,sam_iris==1]
train_iris=iris[sam_iris==1,]
test_iris=iris[sam_iris==2,]
library(class)
knnModel=knn(train_iris, test_iris,train_iris$Species)
knnModel=knn(train_iris, test_iris,train_iris$Species,k=13)
knnModel=knn(train=train_iris, test=test_iris,train_iris$Species,k=13)
knnModel=knn(train=train_iris, test=test_iris,cl=train_iris$Species,k=13)
knnModel=knn(train=train_iris, test=test_iris,cl=train_iris$Species,k=13)
knnModel=knn(train=train_iris, test=test_iris,cl=train_iris$Species,k=13)
library(class)
sam_iris=sample(2, nrow(iris),replace = TRUE, prob=c(0.85,0.15))
train_iris=iris[sam_iris==1,]
test_iris=iris[sam_iris==2,]
knnModel=knn(train=train_iris, test=test_iris,cl=train_iris$Species,k=13)
library(class)
sam_iris=sample(2, nrow(iris),replace = TRUE, prob=c(0.85,0.15))
train_iris=iris[sam_iris==1,]
test_iris=iris[sam_iris==2,]
knnModel=knn(train=train_iris, test=test_iris,cl=train_iris$Species,k=13)
library(class)
sam_iris=sample(2, nrow(iris),replace = TRUE, prob=c(0.85,0.15))
train_iris=iris[sam_iris==1,]
test_iris=iris[sam_iris==2,]
knnModel=knn(train=train_iris, test=test_iris,cl=train_iris$Species,k=13)
library(class)
sam_iris=sample(2, nrow(iris),replace = TRUE, prob=c(0.85,0.15))
train_iris=iris[sam_iris==1,]
test_iris=iris[sam_iris==2,]
knnModel=knn(train=train_iris, test=test_iris,cl=train_iris$Species,k=13)
knnModel=knn(train=train_iris, test=test_iris,cl=train_iris$Species,k=13)
target=train_iris[,5]
knnModel=knn(train=train_iris, test=test_iris,cl=target,k=13)
knnModel=knn(train=train_iris, test=test_iris,cl=target,k=13)
knnModel=knn(train=train_iris, test=test_iris,cl=target,k=13)
target
train_iris
knnModel=knn(train=train_iris, test=test_iris,cl=target,k=13)
knnModel=knn(train_iris,test_iris,cl=target,k=13)
knnModel=knn(train_iris,test_iris,cl=train_iris$Species,k=13)
knnModel=knn(train_iris,test_iris,cl=train_iris$Species,k=13)
airmiles
air
AirPassengers
air
diamond
nrow(air)
nrow(airquality)
nrow(iris)
sam_air=sample(2,nrow(airquality),replace = TRUE,prob=c(0.85,0.15))
train_air=airquality[sam_air==1,]
test_air=airquality[sam_air==2,]
knn_air=knn(train_air,test_air,cl=train_air$Month,k=15)
airquality=na.omit(airquality)
sam_air=sample(2,nrow(airquality),replace = TRUE,prob=c(0.85,0.15))
train_air=airquality[sam_air==1,]
test_air=airquality[sam_air==2,]
knn_air=knn(train_air,test_air,cl=train_air$Month,k=15)
table(knn_air,test_air$Month)
install.packages("arules")
libray(arules)
library(arules)
groceries
groceries
library(arules)
groceries
Groceries
library(arules)
Groceries
arules
?arules
str(arules)
Groceries
data(Groceries)
Groceries
View(Groceries)
data.frame(Groceries)
data(Groceries)
Groc=data("Groceries")
str(Groc)
Groc=data("Groceries")
str(Groc)
Groc
summary(Groc)
Groc=data("Groceries")
Groc=data(Groceries)
summary(Groc)
Groc=data(Groceries)
summary(Groc)
Groc
Groceries
summary(Groceries)
inspect(Groceries)
inspect(airquality)
?inspect
inspect(Groceries[1:3,])
itemFrequency(Groceries[,1])
itemFrequency(Groceries[,1:10])
hist(itemFrequency(Groceries[,1:10]))
hist(itemFrequency(Groceries[,1:100]))
hist(itemFrequency(Groceries[,1:100]))
itemFrequencyPlot(Groceries)
itemFrequencyPlot(Groceries,support=0.50)
itemFrequencyPlot(Groceries,support=0.10)
itemFrequencyPlot(Groceries,support=0.20)
itemFrequencyPlot(Groceries,support=0.15)
?itemFrequencyPlot
hist(itemFrequency(Groceries[,1:100]))
barplot(Groceries)
hist(itemFrequency(Groceries))
itemFrequencyPlot(Groceries,support=0.15)
itemFrequencyPlot(Groceries,support=0.15,type=realtive)
itemFrequencyPlot(Groceries,support=0.15,type=relative)
itemFrequencyPlot(Groceries,support=0.15,type="relative")
itemFrequencyPlot(Groceries,support=0.15,type="absoluate")
itemFrequencyPlot(Groceries,support=0.15,type="absolute")
itemFrequencyPlot(Groceries,support=0.15,,topN=10,type="absolute")
itemFrequencyPlot(Groceries,support=0.15,topN=10,type="absolute")
itemFrequencyPlot(Groceries,topN=10,type="absolute")
itemFrequencyPlot(Groceries,topN=10,type="absolute")
itemFrequencyPlot(Groceries,topN=1000,type="absolute")
itemFrequencyPlot(Groceries,topN=500,type="absolute")
itemFrequencyPlot(Groceries,topN=200,type="absolute")
itemFrequencyPlot(Groceries,topN=100,type="absolute")
itemFrequencyPlot(Groceries,topN=100,type="relative")
m2=apriori(Groceries)
plot(m2)
install.packages("arulesViz")
library(arulesViz)
plot(m2)
m2=apriori(Groceries,parameter = list(support(0.05),confidence=0.25,minlen=2))
m2=apriori(Groceries,parameter = list(support=0.05,confidence=0.25,minlen=2))
m2=apriori(Groceries)
m2=apriori(Groceries)
m3=apriori(Groceries,parameter = list(support=0.05,confidence=0.25,minlen=2))
m2
m3
summary(m2)
summary(m3)
m3=apriori(Groceries,parameter = list(support=0.5,confidence=0.25,minlen=2))
summary(m3)
m3=apriori(Groceries,parameter = list(support=0.007,confidence=0.25,minlen=2))
summary(m3)
?apriori
inspect(m3)
?inspect
?inspect
p <- inspectDT(m3)
htmlwidgets::saveWidget(p, "arules.html", selfcontained = FALSE)
browseURL("arules.html")
p
p <- inspect(m3)
p
htmlwidgets::saveWidget(p, "arules.html", selfcontained = FALSE)
DT
p <- inspectDT(m3)
p
inspect(sort(m3,by="lift"))
?sort
inspect(sort(m3,by="lift")[1:5,])
install.packages("twitteR")
library(twitteR)
install.packages("RCurl")
library(Rcurl)
library(RCurl)
library(shiny)
runExample("01_hellow")
runExample("01_hello")
