print(B[which(B$date>=startdate&B$date<=enddate)])
B$date=as.Date(B$date,"%m/%d%y")
startdate=as.Date("2000-01-01")
enddate=as.Date("2019-10-31")
print(B[which(B$date>=startdate&B$date<=enddate)])
B$date=as.Date(B$date,"%m/%d%y")
B$date
B
print(B)
manager=c(1,2,3,4,5)
date=c("10/24/08","10/28/08","10/1/08","10/12/08","5/1/09")
country=c("US","US","UK","UK","UK")
gender=c("M","F","F","M","F")
age=c(32,42,25,39,99)
q1=c(5,3,3,3,2)
q2=c(4,5,5,3,2)
q3=c(5,2,5,4,1)
q4=c(5,5,5,NA,2)
q5=c(5,5,2,NA,1)
B=data.frame(manager,date,country,gender,age,q1,q2,q3,q4,q5,stringsAsFactors=FALSE)
print(B)
B=within(B,{
agecat=NA
agecat[age>75]="elder"
agecat[age>55&age<75]="Middle aged"
agecat[age<55]="Young"
})
fix(B)
B=within(B,{
agecat=NA
agecat[age>75]="elder"
agecat[age>55&age<75]="Middle aged"
agecat[age<55]="Young"
})
B
startdate
B$date
$date=as.Date(B$date,"%m/%d%y")
B$date=as.Date(B$date,"%m/%d%y")
B$date
manager=c(1,2,3,4,5)
date=c("10/24/08","10/28/08","10/1/08","10/12/08","5/1/09")
country=c("US","US","UK","UK","UK")
gender=c("M","F","F","M","F")
age=c(32,42,25,39,99)
q1=c(5,3,3,3,2)
q2=c(4,5,5,3,2)
q3=c(5,2,5,4,1)
q4=c(5,5,5,NA,2)
q5=c(5,5,2,NA,1)
B=data.frame(manager,date,country,gender,age,q1,q2,q3,q4,q5,stringsAsFactors=FALSE)
B$date=as.Date(B$date,"%mm/%dd%y")
B$date=as.Date(B$date,"%mm/%dd%y")
B$date
mysample=B(smaple(1:nrow(B),3,replace=TRUE))
B
mysample=B[smaple(1:nrow(B),3,replace=TRUE),]
mysample=B[sample(1:nrow(B),3,replace=TRUE),]
mysample
mysample
mysample=B[sample(1:nrow(B)),3,replace=FALSE]
mysample=B[sample(1:nrow(B)),3,replace=FALSE),]
mysample=B[sample(1:nrow(B),3,replace=FALSE),]
mysample
mysample=B[sample(1:nrow(B),3,replace = FALSE),]
mysample
library(sqldf)
install.packages("sqldf")
library(sqldf)
install.packages("chron")
newdf=sqldf("select * from mtcars where carb=1 order by mpg",row.names=TRUE)
library(sqldf)
newdf=sqldf("select * from mtcars where carb=1 order by mpg",row.names=TRUE)
library(chron)
install.packages(chron)
install.packages("chron")
library(chron)
install.packages("chron")
install.packages("C:/Users/yzm/Desktop/chron_2.3-50.zip", repos = NULL, type = "win.binary")
library(sqldf)
newdf=sqldf("select * from mtcars where carb=1 order by mpg",row.names=TRUE)
newdf
print(sqldf("select avg(mpg) as avg_mpg , avg(disp) as avg_disp, gear from mtcars where cyl in c(4,6) group by gcar"))
sqldf("select avg(mpg) as avg_mpg , avg(disp) as avg_disp, gear from mtcars where cyl in c(4,6) group by gcar")
sqldf("select avg(mpg) as avg_mpg , avg(disp) as avg_disp, gear from mtcars where cyl in (4,6) group by gcar")
print(sqldf("select avg(mpg) as avg_mpg , avg(disp) as avg_disp, gear from mtcars where cyl in (4,6) group by gear"))
print(sqldf("select round(avg(mpg)) as avg_mpg , avg(disp) as avg_disp, gear from mtcars where cyl in (4,6) group by gear"))
paste("x",1:3,seq="M")
options(digit=2)#  数字全部用两位小数表示
Student=c("JS","AW","BM","DJ","JM","CC","RY","GK","JE","MR")
Math=c(502,600,412,358,495,512,410,625,573,522)
Science=c(95,99,80,82,75,85,80,95,89,86)
English=c(25,22,18,15,20,28,15,30,27,18)
roster=data.frame(Student,Math,Science,English,stringsAsFactors = FALSE)
roster
z=scale(roster[,2:4])
z
roster=cbind(roster,score)
score=apply(z,1,mean)
roster=cbind(roster,score)
roster
grade[score<y[1]&score>=y[2]]="B"
options(digit=2)#  数字全部用两位小数表示
Student=c("JS","AW","BM","DJ","JM","CC","RY","GK","JE","MR")
Math=c(502,600,412,358,495,512,410,625,573,522)
Science=c(95,99,80,82,75,85,80,95,89,86)
English=c(25,22,18,15,20,28,15,30,27,18)
roster=data.frame(Student,Math,Science,English,stringsAsFactors = FALSE)
roster
z=scale(roster[,2:4])
score=apply(z,1,mean)
roster=cbind(roster,score)
y=quantile(score,c(.8,.6,.4,.2))
roster=within(roster,{
grade[score>=y[1]]="A"
grade[score<y[1]&score>=y[2]]="B"
grade[score<y[2]&score>=y[3]]="C"
grade[score<y[3]&score>=y[4]]="D"
grade[score<y[4]]="F"
})
name=strsplit((roster$Student)," ")
lastName=sapply(name,"[",2)
firstName=sapply(name,"]",1)
roster=cbind(roster[,-1],lastName,firstName)# 有了详细的姓名 不用student  列了
roster=roster[order(firstName,lastName),]
roster=within(roster,{
grade[score>=y[1]]="A"
grade[score<y[1]&score>=y[2]]="B"
grade[score<y[2]&score>=y[3]]="C"
grade[score<y[3]&score>=y[4]]="D"
grade[score<y[4]]="F"
})
y=quantile(score,c(.8,.6,.4,.2))
y
roster=within(roster,{
B$grade[score>=y[1]]="A"
B$grade[score<y[1]&score>=y[2]]="B"
B$grade[score<y[2]&score>=y[3]]="C"
B$grade[score<y[3]&score>=y[4]]="D"
B$grade[score<y[4]]="F"
})
roster=within(roster,{
roster$grade[score>=y[1]]="A"
roster$grade[score<y[1]&score>=y[2]]="B"
roster$grade[score<y[2]&score>=y[3]]="C"
roster$grade[score<y[3]&score>=y[4]]="D"
roster$grade[score<y[4]]="F"
})
name=strsplit((roster$Student)," ")
lastName=sapply(name,"[",2)
firstName=sapply(name,"]",1)
roster=cbind(roster[,-1],lastName,firstName)# 有了详细的姓名 不用student  列了
roster=roster[order(firstName,lastName),]
lastName=sapply(name,"[",2)
firstName=sapply(name,"]",1)
name=strsplit((roster$Student)," ")
name
lastName=sapply(name,"[",2)
firstName=sapply(name,"]",1)
firstName=sapply(name,"[",1)
roster=cbind(roster[,-1],lastName,firstName)# 有了详细的姓名 不用student  列了
roster=roster[order(firstName,lastName),]
roster
options(digit=2)#  数字全部用两位小数表示
Student=c("J S","A W","B M","D J","J M","C C","R Y","G K","J E","M R")
Math=c(502,600,412,358,495,512,410,625,573,522)
Science=c(95,99,80,82,75,85,80,95,89,86)
English=c(25,22,18,15,20,28,15,30,27,18)
roster=data.frame(Student,Math,Science,English,stringsAsFactors = FALSE)
roster
z=scale(roster[,2:4])
score=apply(z,1,mean)
roster=cbind(roster,score)
y=quantile(score,c(.8,.6,.4,.2))
roster=within(roster,{
roster$grade[score>=y[1]]="A"
roster$grade[score<y[1]&score>=y[2]]="B"
roster$grade[score<y[2]&score>=y[3]]="C"
roster$grade[score<y[3]&score>=y[4]]="D"
roster$grade[score<y[4]]="F"
})
name=strsplit((roster$Student)," ")
lastName=sapply(name,"[",2)
firstName=sapply(name,"[",1)
roster=cbind(roster[,-1],lastName,firstName)# 有了详细的姓名 不用student  列了
roster=roster[order(firstName,lastName),]
roster
roster
options(digit=2)#  数字全部用两位小数表示
Student=c("J S","A W","B M","D J","J M","C C","R Y","G K","J E","M R")
Math=c(502,600,412,358,495,512,410,625,573,522)
Science=c(95,99,80,82,75,85,80,95,89,86)
English=c(25,22,18,15,20,28,15,30,27,18)
roster=data.frame(Student,Math,Science,English,stringsAsFactors = FALSE)
roster
z=scale(roster[,2:4])
score=apply(z,1,mean)
roster=cbind(roster,score)
y=quantile(score,c(.8,.6,.4,.2))
roster=within(roster,{
roster$grade[score>=y[1]]="A"
roster$grade[score<y[1]&score>=y[2]]="B"
roster$grade[score<y[2]&score>=y[3]]="C"
roster$grade[score<y[3]&score>=y[4]]="D"
roster$grade[score<y[4]]="F"
})
name=strsplit((roster$Student)," ")
lastName=sapply(name,"[",2)
firstName=sapply(name,"[",1)
#roster=cbind(roster[,-1],lastName,firstName)# 有了详细的姓名 不用student  列了
roster=roster[order(firstName,lastName),]
roster
options(digit=2)#  数字全部用两位小数表示
Student=c("J S","A W","B M","D J","J M","C C","R Y","G K","J E","M R")
Math=c(502,600,412,358,495,512,410,625,573,522)
Science=c(95,99,80,82,75,85,80,95,89,86)
English=c(25,22,18,15,20,28,15,30,27,18)
roster=data.frame(Student,Math,Science,English,stringsAsFactors = FALSE)
roster
z=scale(roster[,2:4])
score=apply(z,1,mean)
roster=cbind(roster,score)
roster
y=quantile(score,c(.8,.6,.4,.2))
roster=within(roster,{
roster$grade[score>=y[1]]="A"
roster$grade[score<y[1]&score>=y[2]]="B"
roster$grade[score<y[2]&score>=y[3]]="C"
roster$grade[score<y[3]&score>=y[4]]="D"
roster$grade[score<y[4]]="F"
})
name=strsplit((roster$Student)," ")
lastName=sapply(name,"[",2)
firstName=sapply(name,"[",1)
roster=cbind(lastName,firstName,roster[,-1])# 有了详细的姓名 不用student  列了
roster=roster[order(firstName,lastName),]
roster
options(digit=2)#  数字全部用两位小数表示
Student=c("J S","A W","B M","D J","J M","C C","R Y","G K","J E","M R")
Math=c(502,600,412,358,495,512,410,625,573,522)
Science=c(95,99,80,82,75,85,80,95,89,86)
English=c(25,22,18,15,20,28,15,30,27,18)
roster=data.frame(Student,Math,Science,English,stringsAsFactors = FALSE)
roster
z=scale(roster[,2:4])
score=apply(z,1,mean)
roster=cbind(roster,score)
y=quantile(score,c(.8,.6,.4,.2))
roster=within(roster,{
roster$grade[score>=y[1]]="A"
roster$grade[score<y[1]&score>=y[2]]="B"
roster$grade[score<y[2]&score>=y[3]]="C"
roster$grade[score<y[3]&score>=y[4]]="D"
roster$grade[score<y[4]]="F"
})
name=strsplit((roster$Student)," ")
lastName=sapply(name,"[",2)
firstName=sapply(name,"[",1)
roster
options(digit=2)#  数字全部用两位小数表示
Student=c("J S","A W","B M","D J","J M","C C","R Y","G K","J E","M R")
Math=c(502,600,412,358,495,512,410,625,573,522)
Science=c(95,99,80,82,75,85,80,95,89,86)
English=c(25,22,18,15,20,28,15,30,27,18)
roster=data.frame(Student,Math,Science,English,stringsAsFactors = FALSE)
roster
z=scale(roster[,2:4])
score=apply(z,1,mean)
roster=cbind(roster,score)
roster
y=quantile(score,c(.8,.6,.4,.2))
roster=within(roster,{
roster$grade[score>=y[1]]="A"
roster$grade[score<y[1]&score>=y[2]]="B"
roster$grade[score<y[2]&score>=y[3]]="C"
roster$grade[score<y[3]&score>=y[4]]="D"
roster$grade[score<y[4]]="F"
})
roster
name=strsplit((roster$Student)," ")
lastName=sapply(name,"[",2)
firstName=sapply(name,"[",1)
roster
roster=cbind(firstName,lastName,roster[,-1])# 有了详细的姓名 不用student  列了
roster=roster[order(firstName,lastName),]
roster
mdf=merge(trail_data$price,dfp)
draw(mdf)
dfp=predict(step_lm_model,interval = "prediction")
head(dfp,10)
dfp=predict(step_lm_model,interval = "prediction")
library(ggplot2)
#dataset 名称由   diamond 改为 diamonds
head(diamonds)
sample_data=sample(2,nrow(diamonds),replace = TRUE,prob=c(0.7,0.3))
trail_data=diamonds[sample_data==1,] #训练数据
test_data=diamonds[sample_data==2,]
lm_model=lm(price~., data=trail_data)
summary(lm_model)
par(mfrow=c(2,2))
plot(lm_model)
summary(lm_model)
par(mfrow=c(2,2))
plot(lm_model)
step_lm_model=step(lm_model)
summary(step_lm_model)
dfp=predict(step_lm_model,interval = "prediction")
head(dfp,10)
mdf=merge(trail_data$price,dfp)
draw(mdf)
library(rpart)
tree_model=rpart(price~.,data=trail_data)
print(tree_model)
install.packages("maptree")
library(maptree)
#draw the tree
draw.tree(tree_model)
rsq.rpart(tree_model)
plotcp(tree_model)
plotcp(tree_model)
tree_model2=prune(tree_model,cp=0.1)
dfp2=predict(tree_model2,interval = "prediction")
head(dfp2,10)
mdf2=merge(trail_data$price,dfp2)
draw(mdf2)
？draw
?draw
??draw
mdf=merge(trail_data$price,dfp)
draw(mdf)
memory.limit()
memory.limit(102400)
memory.limit()
memory.size()
memory.size(102400)
memory.size()
dfp=predict(step_lm_model,interval = "prediction")
dfp
mdf=merge(trail_data$price,dfp
mdf=merge(trail_data$price,dfp)
mdf=merge(trail_data$price,dfp)
pairs(as.data.frame(trail_data[,c(-2,-3,-4)]))
pairs(as.data.frame(trail_data[,c(-2,-3,-4)]))
library(rpart)
tree_model=rpart(price~.,data=trail_data)
print(tree_model)
install.packages("maptree")
library(maptree)
#draw the tree
draw.tree(tree_model)
install.packages("maptree")
rsq.rpart(tree_model)
rsq.rpart(tree_model)
plotcp(tree_model)
tree_model2=prune(tree_model,cp=0.1)
library(rpart)
tree_model=rpart(price~.,data=trail_data)
print(tree_model)
install.packages("maptree")
library(maptree)
draw.tree(tree_model)
rsq.rpart(tree_model)
plotcp(tree_model)
tree_model2=prune(tree_model,cp=0.1)
dfp2=predict(tree_model2,interval = "prediction")
head(dfp2,10)
head(dfp2,1000)
draw(mdf2)
dfp=predict(step_lm_model,interval = "prediction")
head(dfp,10)
View(dfp)
library(ggplot2)
library(car)
head(diamonds)
diamond=data.frame(diamonds,na.rm=TRUE)
lm1=lm(price~carat+depth+table+x+y+z+cut+color+clarity,data=diamond,na.rm=TRUE)
lm2=lm(price~., data=diamond[-c(2,3,4)])
summary(lm2)
summary(lm1)
steplm1=step(lm1)
summary(steplm1)
par(mfrow=c(2,2))
plot(steplm1)
dfp=predict(steplm1,interval="prediction")
head(dfp,100)
# big memory required
mdf=merge(diamond$price,dfp)
mdf2=merge(head(diamond$price,1000),head(dfp,1000))
head(mdf2)
head(mdf2,100)
line(mdf2$x)
mdf2=matrix(mdf2,ncol=5,byrow = T)
mdf2=matrix(mdf2,ncol=4,byrow = T)
mdf2=matrix(mdf2,ncol=4,byrow = T)
mdf2
head(mdf2,100)
matplot(mdf2[,1],mdf2[,2:4],type="l",lwd=1,xlab="x",ylab="y")
matplot(mdf2[,1],mdf2[,2:4],type="l",lwd=1)
mdf2=merge(head(diamond$price,1000),head(dfp,1000))
plot(mdf2[,1],mdf2[,2:4],type="l",lwd=1)
plot(mdf2[,1],mdf2[,2:5],type="l",lwd=1)
plot(mdf2[,1],mdf2[,2:4],type="l",lwd=1)
mdf2
head(mdf2)
head(mdf2[,1])
head(mdf2[1,])
mdf3=matrix(mdf2,ncol=9,byrow = TRUE)
mdf3=matrix(mdf2,ncol=4,byrow = TRUE)
head(mdf3)
plot(mdf3[,1],mdf2[,2:4],type="l",lwd=1)
plot(mdf2[,0],mdf2[,2:4],type="l",lwd=1)
head(mdf2[,1])
head(mdf2[,0])
head(mdf2[1,])
[1:1000000]
mdf2$id=c[1:1000000]
id=c[1:1000000]
id=c[1:1000000]
id=(1:100)
id=(1:1000000)
cbind(mdf2,id)
head(mdf2)
rbind(mdf2,id)
rbind(mdf2,id)
function (..., deparse.level = 1)
cbind(mdf2,id)
head(mdf2)
mdf2=cbind(mdf2,id)
head(mdf2)
plot(mdf2[,5],mdf2[,1:4],type="l",lwd=1)
head(mdf2)
tail(mdf2)
tail(mdf2)
lenghth(mdf2[,5])
length(mdf2[,5])
length(mdf2[1:4])
plot(mdf2[,5],mdf2$[,1:4],type="l",lwd=1)
plot(mdf2[,5],mdf2$x,type="l",lwd=1)
plot((1:1000000),mdf2$x,type="l",lwd=1)
plot((1:1000000),mdf2$x,type="l",lwd=1)
matplot((1:1000000),mdf2$x,type="l",lwd=1)
matplot((1:1000000),mdf2$fit,type="l",lwd=1)
matplot((1:1000000),mdf2$lwr,type="l",lwd=1)
line((1:1000000),mdf2$fit,type="l",lwd=1)
line((1:1000000),mdf2$x,type="l",lwd=1)
line((1:1000000),mdf2$x)
matplot(c(1:1000000),mdf2[,2:4],type="l",lwd=1,xlab="x",ylab="y")
line((1:1000000),mdf2$x)
matplot(c(1:1000000),mdf2[,1:4],type="l",lwd=1,xlab="x",ylab="y")
colnames(mdf2)=paste(c("x",1:5))
matplot(c(1:1000000),mdf2[,1:4],col=c(1:6,8:9),type="l",lwd=1,xlab="x",ylab="y")
legend("20,3000000",colnames(mdf2)[-1],col=c(1:6,8:9),lwd=1)
colnames(mdf2)=paste(c("x",1:5))
colnames(mdf2)=paste(c("x",1:5))
legend("20,3000000",colnames(mdf2)[-1],col=c(1:6,8:9),lwd=1)
matplot(c(1:1000000),mdf2[,1:4],col=c(1:6,8:9),type="l",lwd=1,xlab="x",ylab="y")
matplot(c(1:1000000),mdf2[,1:4],col=c(1:6,8:9),type="l",lwd=1,xlab="x",ylab="y")
source('C:/Users/yzm/Desktop/Diamond.R', echo=TRUE)
matplot(c(1:1000000),mdf2[,1:4],col=c(1:6,8:9),type="l",lwd=1,xlab="x",ylab="y")
matplot(c(1:1000000),mdf2[,1:4],col=c(1:6,8:9),type="l",lwd=1,xlab="x",ylab="y")
plot(c(1:1000000),mdf2[,1:4],col=c(1:6,8:9),type="l",lwd=1,xlab="x",ylab="y")
plot(c(1:1000000),mdf2[,1:4],col=c(1:6,8:9),type="l",lwd=1,xlab="x",ylab="y")
matplot(c(1:1000000),mdf2[,1:4],type="l",lwd=1,xlab="x",ylab="y")
,col=c(1:6,8:9)
matplot(c(1:1000000),mdf2[,2:4],type="l",lwd=1,col=c(1:6,8:9),xlab="x",ylab="y")
matplot(c(1:1000000),mdf2[,1:4],type="l",lwd=1,col=c(1:6,8:9),xlab="x",ylab="y")
tail(mdf2)
matplot(c(1:1000000),mdf2[,1:4],type="l",lwd=1,col=c(1:6,8:9),xlab="x",ylab="y")
line((1:1000000),mdf2$x)
abline((1:1000000),mdf2$x)
matplot(c(1:1000000),mdf2[,1:4],type="l",lwd=1,col=c(1:6,8:9),xlab="x",ylab="y")
plot(c(1:1000000),mdf2[,1:4],type="l",lwd=1,col=c(1:6,8:9),xlab="x",ylab="y")
plot(c(1:100000),mdf2[,1:4],type="l",lwd=1,col=c(1:6,8:9),xlab="x",ylab="y")
plot(c(1:100000),head(mdf2[,1:4],100000),type="l",lwd=1,col=c(1:6,8:9),xlab="x",ylab="y")
plot(c(1:100000),head(mdf2[,1:4],100000),type="l",lwd=1,col=c(1:6,8:9),xlab="x",ylab="y")
View(mdf2)
View(mdf2)
View(mdf2)
View(mdf2)
View(mdf2)
View(mdf2)
View(mdf2)
plot(c(1:1000000),mdf2[,1:4],,type="l",lwd=1,col=c(1:6,8:9),xlab="x",ylab="y")
library(ggplot2)
library(car)
head(diamonds)
diamond=data.frame(diamonds,na.rm=TRUE)
lm1=lm(price~carat+depth+table+x+y+z+cut+color+clarity,data=diamond,na.rm=TRUE)
steplm1=step(lm1)
steplm1=step(lm1)
summary(steplm1)
par(mfrow=c(2,2))
plot(steplm1)
dfp=predict(steplm1,interval="prediction")
head(dfp,100)
# big memory required
#mdf=merge(diamond$price,dfp)
mdf2=merge(head(diamond$price,1000),head(dfp,1000))
id=(1:1000000)
mdf2=cbind(mdf2,id)
tail(mdf2)
length(mdf2[1:4])
plot(c(1:1000000),mdf2[,1:4],type="l",lwd=1,col=c(1:6,8:9),xlab="x",ylab="y")
plot(c(1:1000000),mdf2[,1:4],type="l",lwd=1,col=c(1:6,8:9),xlab="x",ylab="y")
abline((1:1000000),mdf2$x)
plot(c(1:1000000),mdf2$x,type="l",lwd=1,col=c(1:6,8:9),xlab="x",ylab="y")
plot(c(1:1000000),mdf2$x,type="l",lwd=1,col=c(1:6,8:9),xlab="x",ylab="y")
plot(c(1:1000000),mdf2$fit,type="l",lwd=1,col=c(1:6,8:9),xlab="x",ylab="y")
plot(c(1:1000000),mdf2$fit,type="l",lwd=1,col=c(1:6,8:9),xlab="x",ylab="y")
abline((1:1000000),mdf2$x)
plot(c(1:1000000),mdf2$fit,type="l",lwd=1,col=c(1:6,8:9),xlab="x",ylab="y")
plot(c(1:1000000),mdf2$fit,type="l",lwd=1,col=c(1:6,8:9),xlab="x",ylab="y")
