?raprt
??rpart
?rapr
?rpart()
dtm=rpart(Species~., data=train,method="class")
dtm
draw(dtm)
draw(dtm)
plot(dtm)
text(all=TRUE)
plot(dtm)
text(all=TRUE)
text(dtm)
plot(dtm)
text(dtm)
library(rpart.plot)
install.packages("rpart.plot")
rpart.plot(dtm)
library(rpart.plot)
rpart.plot(dtm)
par(mfrow=c(1,1))
rpart.plot(dtm)
rpart.plot(dtm,type=4,extra=101)
predict(dtm,test)
tree_predict=predict(dtm,test)
tree_predict=predict(dtm,test[,5],type="class")
tree_predict=predict(dtm,test[,5],type="class")
tree_predict=predict(dtm,test,type="class")
table(tree_predict)
table(test)
table(test$Species)
table(tree_predict)
sam=sample(2,nrow(diamonds),replace = TRUE,prob=c(0.7,0.3))
sam=sample(2,nrow(diamond),replace = TRUE,prob=c(0.7,0.3))
d_train=diamond[sam==1,]
d_test=diamond[sam==2,]
d_dtm=rpart(price~.,d_train,type="class")
d_dtm=rpart(price~.,data=d_train,type="class")
d_dtm=rpart(price~.,data=d_train,method="class")
plot(d_dtm)
plot(d_dtm)
rpart.plot(d_dtm)
d_pre=predict(d_dtm,d_test,type="class")
table(d_pre)
table(d_test$price)
plot(d_dtm)
?rpart()
d_dtm=rpart(price~.,data=d_train)
plot(d_dtm)
d_pre=predict(d_dtm,d_test)
table(d_pre)
table(d_test$price)
table(d_pre)
rpart.plot(d_dtm)
?predict()
s=sample(150,50)
s
s
s
s
s
?sample
library(tree)
library(evtree)
install.packages("evtree")
library(evtree)
rpart.plot(dtm,type=4,extra=101)
library(rpart.plot)
rpart.plot(dtm,type=4,extra=101)
dtm2=tree(Species~.,data=train)
plot(dtm2)
text(dtm2,all=TRUE)
plot(dtm)
text(dtm,all=TRUE)
?tree()
dtm2=tree(Species~.,data=train,method="class")
plot(dtm2)
text(dtm2,all=TRUE)
predict2=predict(dtm2,test)
table(predict2)
table(tree_predict)
table(predict2)
table(test$Species,tree_predict)
table(test$Species,predict2)
predict2=predict(dtm2,test,type="class")
table(test$Species,predict2)
tree_predict=predict(dtm,test)
table(tree_predict)
table(test$Species,predict2.tree_predict)
table(test$Species,predict2,tree_predict)
predict2=predict(dtm2,test,type="class")
table(test$Species,predict2,tree_predict)
dtm2=tree(Species~.,data=train,method="class")
tree_predict=predict(dtm,test,type="class")
table(test$Species,predict2,tree_predict)
table(test$Species,predict2)
table(test$Species,tree_predict)
dtm3=evtree(Species~.,data=train,method="class")
plot(dtm3)
text(dtm3,all=TRUE)
plot(dtm3)
text(dtm3,all=TRUE)
text(dtm3)
plot(dtm3)
text(dtm3)
plot(dtm3)
mean(p==testp[,5])
mean(predict2==testp[,5])
mean(predict2==test[,5])
predict3=predict(dtm3,test,method="class")
table(test$Species,predict3)
mean=(predict3==test[,5])
mean(predict2==test[,5])
table(test$Species,predict3)
mean=(predict3==test[,5])
mean(predict3==test[,5])
mean(tree_predict==test[,5])
library(randomForest)
s=sample(2,nrow(iris),replace=TRUE,prob=c(0.85,0.15))
s=sample(2,nrow(iris),replace=TRUE,prob=c(0.85,0.15))
train=iris[s==1]
test=iris[s==2]
train=iris[s==1,]
test=iris[s==2,]
rfm=randomForest(Species~., data=trian)
library(randomForest)
rfm=randomForest(Species~., data=trian)
rfm=randomForest(Species~., data=train)
table(test[5,],rfm)
importance(rfm)
getTree(rfm,500,labelVar = TRUE)
table(test[,5],rfm)
rfm=randomForest(Species~., data=train)
table(test[,5],rfm)
table(test[,5],rfm)
table(test,rfm)
importance(rfm)
?randomForest()
getTree(rfm,500,labelVar = TRUE,do.trace=TRUE)
rfm=randomForest(Species~., data=train,do.trace=TRUE)
rfm=randomForest(Species~., data=train,do.trace=TRUE)
rfm=randomForest(Species~., data=train,do.trace=TRUE,mtree=50)
rfm=randomForest(Species~., data=train,do.trace=TRUE,mtree=50)
rfm=randomForest(Species~., data=train,do.trace=TRUE,ntree=50)
rfm
rfm=randomForest(Species~., data=train,do.trace=TRUE,ntree=500)
rfm
rfm=randomForest(Species~., data=train,do.trace=TRUE,ntree=500,mtry=10)
rfm=randomForest(Species~., data=train,do.trace=TRUE,ntree=500,mtry=5)
predict5=predict(rfm,test)
predict5=predict(rfm,test)
table(test,prefict5)
table(test,predict5)
predict5=predict(rfm,test)
table(test,predict5)
mean(test[,5]==predict5)
rfm=randomForest(Species~., data=train,do.trace=TRUE,ntree=500)
table(test,predict5)
mean(test[,5]==predict5)
importance(rfm)
getTree(rfm,500,labelVar = TRUE)
predict5=predict(rfm,test)
table(test,predict5)
table(test[,5],predict5)
mean(test[,5]==predict5)
?princomp
?prcomp
head(mtcars)
pc=prcomp(mtcars)
pc
pc=prcomp(mtcars,cor=TRUE,score=TRUE)
pc=princomp(mtcars,cor=TRUE,score=TRUE)
pc
pc=princomp(mtcars,cor=TRUE,scores=TRUE)
pc
pc=princomp(mtcars,cor=TRUE,scores=TRUE)
pc
pc=princomp(mtcars,cor=TRUE,scores=TRUE)
pc
summary(pc)
plot(pc)
plot(pc,type="l",col=2)
biplot(pc)
attr(pc)
attributes(pc)
pc$loadings
loadings(pc)
pc$socres
attributes(pc)
View(pc)
View(as.data.frame(pc))
p=as.data.frame(pc)
summary(pc)
plot(pc,type="l",col=2)
pc
library(psych)
install.packages("psych")
library(psych)
fit=principal(mtcars,nfactors = 5, rotate="varimax")
fit
fit=factanal(mtcars,3,rotation = "varimax")
load=fit$loadings[,1:2]
plot(fit,type="n")
load=fit$loadings[,1:2]
plot(fit,type="n")
text(load,labels=names(mtcars),cex=.7)
fit=factanal(mtcars,3,rotation = "varimax")
load=fit$loadings[,1:2]
plot(fit,type="n")
text(load,labels=names(mtcars),cex=.7)
diamonds_samp <- d[sample(1:length(d$Species),150),]
ggpairs(diamonds_samp )
diag(2.1, nr = 3, nc = 5)
m <- matrix(c(1,1,2,1),2,2)
layout(m, widths=c(2, 1),
heights=c(1, 2))
layout.show(2)
install.packages("ca")
library(ca)
mytable=with(mtcars,table(A,B))
mytable=with(iris,table(iris$Species,iris$Sepal.Length))
prop.table(mytable,1)
fit=ca(mytable)
print(fit)
summary(fit)
plot(fit)
plot(fit, mass = TRUE, contrib = "absolute", map =
"rowgreen", arrows = c(FALSE, TRUE))
plot(fit, mass = TRUE, contrib = "absolute", map =
"rowgreen
head(diamond)
head(diamonds)
cor(dd)
dd=mtcars
fgn
fng
dev.off()
eixt
dd=mtcars
plot(dd)
cor(dd)
symnum(cor(dd,method="kendall"))
plotcov(cor(dd,method="kendall") )
library(GGally)
library(pcaPP)
library(corrplot)
library(ca)
plotcov(cor(dd,method="kendall") )
corrplot(cor(dd),type="lower")
mytable=with(iris,table(iris$Species,iris$Sepal.Length))
prop.table(mytable,1)
fit=ca(mytable)
print(fit)
summary(fit)
plot(fit)
plot(fit, mass = TRUE, contrib = "absolute", map =
"rowgreen", arrows = c(FALSE, TRUE))
library(psych)
pc=princomp(mtcars,cor=TRUE,scores=TRUE)
pc
pc
summary(pc)
plot(pc,type="l",col=2)
pc1=princomp(iris[c(-5)],cor=TRUE,scores=TRUE)
summary(pc1)
summary(pc1)
plot(pc1)
summary(pc1)
summary(pc1)
plot(pc1)
plot(pc1,type="l")
pc1=princomp(iris,cor=TRUE,scores=TRUE)
[c(-5)
pc1=princomp(iris[c(-5)],cor=TRUE,scores=TRUE)
head(USArrests)
c=cor(USArrests)
c
e=eigen(c)
e
pc2=princomp(USArrests,cor=TRUE,scores=TRUE)
summary(pc2)
plot(pc2,type="l")
pc=princomp(mtcars,cor=TRUE,scores=TRUE,loadings=TRUE,scale=TRUE)
pc=princomp(mtcars,cor=TRUE,scores=TRUE)
pc$weights
pcc=prcomp(mtcars,cor=TRUE,scale=TRUE)
?prcomp
summary(pc)
summary(pcc)
summary(pc)
summary(pcc)
summary(pc)
summary(pc)
summary(pcc)
pcc=prcomp(mtcars,cor=TRUE,scale=FALSE)
summary(pcc)
summary(pc)
?prcomp
pc=princomp(mtcars,cor=TRUE,scores=TRUE,scale=FALSE)
principal(pc)
install.packages("RGtk2")
install.packages("rattle")
e=eigen(c)
e
library(rattle)
rattle()
data()
source('C:/Users/yzm/Desktop/MEAN&R/Rontes/R语言实战笔记/Rattle data mining in R.r')
x=rnorm(100)
x
x==rnorm(100)
y=rnorm(100)
z=rnorm(100)
df=as.data.frame(x,y,z)
df
df=data.frame(x,y,z)
df
library(e1071)
data(cats,package="MASS")
inputData=data.frame(cats[,c(2,3),response=as.factor(cats$Sex))
inputData=data.frame(cats[,c(2,3)],response=as.factor(cats$Sex))
inputData
cats
svmfit=svm(response~., data=inputData,kernel="linear",cost=10,scale=FALSE)
print(svmfit)
plot(svmfit)
plot(svmfit,data = inputData)
compareTable=table(inputData$response,predict(svmfit))
mean(inputData$response,predict(svmfit))
mean(inputData$response!=predict(svmfit))
svmfit2=svm(response~.,data=inputData,kernel="radial",cost=10,scale=FALSE)
print(svmfit2)
plot(svmfit2,data = inputData)
plot(svmfit2,data = inputData)
plot(svmfit,data = inputData)
set.seed(100) # for reproducing results
rowIndices <- 1 : nrow(inputData) # prepare row indices
sampleSize <- 0.8 * length(rowIndices) # training sample size
trainingRows <- sample (rowIndices, sampleSize) # random sampling
trainingData <- inputData[trainingRows, ] # training data
testData <- inputData[-trainingRows, ] # test data
tuned <- tune.svm(response ~., data = trainingData, gamma = 10^(-6:-1), cost = 10^(1:2)) # tune
summary (tuned) # to select best gamma and cost
sam=sample(2,nrow(inputData),replace = TRUE,prob=c(0.85,0.15))
train_data=inputData[sam==1,]
test_data=inputData[sam==2]
test_data=inputData[sam==2,]
tuned2=tune.svm(response~., data=inputData,gamma = 10^(-6:-1), cost = 10^(1:2),scale=FALSE)
summary(tuned2)
svmfit2
svmfit3=svm(response~., data = train_data,kerneal="radial",cost=100,gamma=0.01,scale = FALSE)
comparetable2=table(test_data$response,predict(svmfit3,test_data))
mean(test_data$response!=predict(svmfit3,test_data))
table(svmfit3)
table(predict(svmfit3,test_data))
table(test_data$response,predict(svmfit3,test_data))
plot(svmfit3,test_data)
plot(svmfit3,inputData)
?svm()
summary (tuned) # to select best gamma and cost
summary (order(tuned[,3]) # to select best gamma and cost
sam=sample(2,nrow(inputData),replace = TRUE,prob=c(0.85,0.15))
train_data=inputData[sam==1,]
test_data=inputData[sam==2,]
tuned2=tune.svm(response~., data=inputData,gamma = 10^(-6:-1), cost = 10^(1:2),scale=FALSE)
summary(tuned2)
svmfit3=svm(response~., data = train_data,kerneal="radial",cost=100,gamma=0.01,scale = FALSE)
comparetable2=table(test_data$response,predict(svmfit3,test_data))
mean(test_data$response!=predict(svmfit3,test_data))
plot(svmfit3,inputData)
table(test_data$response,predict(svmfit3,test_data))
summary (order(tuned[,3])) # to select best gamma and cost
summary (order(tuned$error)) # to select best gamma and cost
summary (order(tuned) # to select best gamma and cost
sam=sample(2,nrow(inputData),replace = TRUE,prob=c(0.85,0.15))
train_data=inputData[sam==1,]
test_data=inputData[sam==2,]
tuned2=tune.svm(response~., data=inputData,gamma = 10^(-6:-1), cost = 10^(1:2),scale=FALSE)
summary(tuned2)
svmfit3=svm(response~., data = train_data,kerneal="radial",cost=100,gamma=0.01,scale = FALSE)
comparetable2=table(test_data$response,predict(svmfit3,test_data))
mean(test_data$response!=predict(svmfit3,test_data))
plot(svmfit3,inputData)
table(test_data$response,predict(svmfit3,test_data))
summary (order(tuned)) # to select best gamma and cost
summary (rank(tuned)) # to select best gamma and cost
summary (rank(tuned[,3])) # to select best gamma and cost
require(devtools)
install_github('rCharts', 'ramnathv')
r1 <- rPlot(mpg ~ wt | am + vs, data = mtcars, type = "point", color = "gear")
r1$print("chart1")
install.packages("devtools")
library(devtools)
install_github('rCharts', 'ramnathv')
r1 <- rPlot(mpg ~ wt | am + vs, data = mtcars, type = "point", color = "gear")
install_github('rCharts', 'ramnathv')
r1 <- rPlot(mpg ~ wt | am + vs, data = mtcars, type = "point", color = "gear")
r1$print("chart1")
install.packages(c("rCharts", "ramnathv"))
install_github('rCharts', 'ramnathv')
install_github(rCharts/ramnathv)
install_github('rCharts'/ 'ramnathv')
install.packages("C:/Users/yzm/Desktop/ramnathv-rCharts-2c368c8.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/yzm/Desktop/ramnathv-rCharts-2c368c8.zip", repos = NULL, type = "win.binary")
require(devtools)
install_github('rCharts'/ 'ramnathv')
data(economics, package = 'ggplot2')
dat = transform(economics, date = as.character(date))
p3 <- mPlot(x = "date", y = list("psavert", "uempmed"), data = dat, type = 'Area',
labels = list('Savings Rate', 'Median Duration of Unemployment'), pointSize = 0)
p3$print('chart3')
install_github('rCharts', 'ramnathv')
install_github('ramnathv'/rcharts)
install_github('ramnathv'/"rcharts")
install_github('ramnathv/rcharts")
data(economics, package = 'ggplot2')
dat = transform(economics, date = as.character(date))
p3 <- mPlot(x = "date", y = list("psavert", "uempmed"), data = dat, type = 'Area',
labels = list('Savings Rate', 'Median Duration of Unemployment'), pointSize = 0)
p3$print('chart3')
install_github( ramnathv/rcharts)
install_github(rcharts)
install_github('rCharts')
install_github('rCharts')
install.packages("rcharts")
install_github('ramnathv/rCharts')
require(devtools)
require(devtools)
install_github('ramnathv/rCharts')
?plot()
?plot
install_github('rCharts/ramnathv')
require(devtools)
install_github('rCharts/ramnathv')
install_github("madlogos/recharts")
install.packages(c("miniUI", "shiny", "htmltools"))
devtools::install_github("rstudio/htmltools")
install_git("madlogos/recharts")
install_git("madlogos/recharts")
install_github("madlogos/recharts")
library(RCurl)
library(httr)
set_config( config( ssl_verifypeer = 0L ) )
install_github("madlogos/recharts")
install.packages("C:/Users/yzm/Desktop/ramnathv-rCharts-2c368c8.zip", repos = NULL, type = "win.binary")
library(bitops)
library(RCurl)
library(httr)
set_config( config( ssl_verifypeer = 0L ) )
library(swirl)
swirl()
quit
library(bitops)
library(RCurl)
library(httr)
set_config( config( ssl_verifypeer = 0L ) )
install_github('ramnathv/rCharts')
install.packages("devtools")
install.packages("Rcpp")
library(devtools)
library(Rcpp)
install_github('ramnathv/rCharts')
names(iris) = gsub("\\.", "", names(iris))
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
library(rCharts)
names(iris) = gsub("\\.", "", names(iris))
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
head(iris)
plot(SepalLength~SepalWidth,data=iris,col="Species)
plot(SepalLength~SepalWidth,data=iris,col="Species")
plot(SepalLength~SepalWidth,data=iris,col="Species")
plot(SepalLength~SepalWidth,data=iris,col=3)
plot(SepalLength~SepalWidth,data=iris,col="Species")
hair_eye_male <- subset(as.data.frame(HairEyeColor), Sex =="Male")
nPlot(Freq~ Hair,group = "Eye",data =hair_eye_male, type = "multiBarChart")
nPlot(Freq~ Hair,group = "Eye",data =hair_eye_male, type = "multiBarHorizontalChart")
nPlot(~SepalLength,data =iris, type = "discreteBarChart")
nPlot(SepalWidth~SepalLength,data =iris, type = "scatterChart",group='Species')
plot(SepalWidth~SepalLength,data =iris, type = "scatterChart")
plot(SepalWidth~SepalLength,data =iris, type = "l")
plot(SepalWidth~SepalLength,data =iris,  )
plot(SepalWidth~SepalLength,data =iris)
plot(SepalWidth~SepalLength,data =iris,,group='Species')
?plot
plot(SepalWidth~SepalLength,data =iris,type="p",group='Species')
plot(SepalWidth~SepalLength,data =iris,type="p",group='Species')
plot(SepalWidth~SepalLength,data =iris,type="l",group='Species')
plot(SepalWidth~SepalLength,data =iris,type="p",group='Species')
?nplot
?nPlot
??nPlot
??nPlot()
?nPlot()
nPlot(Chrome~date,data =data, type = "lineChart")
nPlot(Chrome~date,data =data, type = "lineChart")
nPlot(SepalWidth~SepalLength,data =iris, type = "lineChart")
nPlot(~Species,data =iris[1:130,], type = "pieChart")
nPlot(~Species,data =iris, type = "pieChart")
map3$setView(c(51.505, -0.09), zoom = 13)
map3$marker(c(51.5, -0.09), bindPopup = "<p> Hi. I am a popup </p>")
map3$marker(c(51.495, -0.083), bindPopup = "<p> Hi. I am another popup </p>")
map3$print("chart7")
install_github("madlogos/recharts")
install_github("madlogos/recharts")
library(recharts)
install_github("madlogos/recharts")
library(devtools)
library(Rcpp)
install_github('ramnathv/rCharts')
install_github("madlogos/recharts")
install.packages("d3r")
library(d3r)
